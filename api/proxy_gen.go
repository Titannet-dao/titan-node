// Code generated by titan/gen/api. DO NOT EDIT.

package api

import (
	"context"
	"github.com/Filecoin-Titan/titan/api/types"
	"github.com/Filecoin-Titan/titan/journal/alerting"
	"github.com/Filecoin-Titan/titan/node/modules/dtypes"
	"github.com/google/uuid"
	xerrors "golang.org/x/xerrors"
	"io"
	"time"

)


var ErrNotSupported = xerrors.New("method not supported")


type AssetStruct struct {

	Internal struct {

		AddAssetView func(p0 context.Context, p1 []string) (error) `perm:"admin"`

		ClearFreeUpDisk func(p0 context.Context) (error) `perm:"admin"`

		CreateAsset func(p0 context.Context, p1 *types.AuthUserUploadDownloadAsset) (string, error) `perm:"admin"`

		DeleteAsset func(p0 context.Context, p1 string) (error) `perm:"admin"`

		GetAssetProgresses func(p0 context.Context, p1 []string) (*types.PullResult, error) `perm:"admin"`

		GetAssetStats func(p0 context.Context) (*types.AssetStats, error) `perm:"admin"`

		GetAssetView func(p0 context.Context) (*types.AssetView, error) `perm:"admin"`

		GetAssetsInBucket func(p0 context.Context, p1 int) ([]string, error) `perm:"admin"`

		GetPullingAssetInfo func(p0 context.Context) (*types.InProgressAsset, error) `perm:"admin"`

		PullAsset func(p0 context.Context, p1 string, p2 []*types.CandidateDownloadInfo) (error) `perm:"admin"`

		PullAssetFromAWS func(p0 context.Context, p1 string, p2 string) (error) `perm:"admin"`

		PullAssetV2 func(p0 context.Context, p1 *types.AssetPullRequest) (error) `perm:"admin"`

		RequestFreeUpDisk func(p0 context.Context, p1 float64) (error) `perm:"admin"`

		StateFreeUpDisk func(p0 context.Context) (*types.FreeUpDiskStateResp, error) `perm:"admin"`

		SyncAssetViewAndData func(p0 context.Context) (error) `perm:"admin"`

	}
}

type AssetStub struct {

}

type AssetAPIStruct struct {

	Internal struct {

		AddAWSData func(p0 context.Context, p1 []types.AWSDataInfo) (error) `perm:"web,admin"`

		CreateAsset func(p0 context.Context, p1 *types.CreateAssetReq) (*types.UploadInfo, error) `perm:"web,admin,user"`

		CreateSyncAsset func(p0 context.Context, p1 *types.CreateSyncAssetReq) (error) `perm:"web,admin,user"`

		GenerateTokenForDownloadSource func(p0 context.Context, p1 string, p2 string) (*types.SourceDownloadInfo, error) `perm:"web,admin,user"`

		GenerateTokenForDownloadSources func(p0 context.Context, p1 string) ([]*types.SourceDownloadInfo, error) `perm:"web,admin,user"`

		GetActiveAssetRecords func(p0 context.Context, p1 int, p2 int) (*types.ListAssetRecordRsp, error) `perm:"web,admin"`

		GetAssetCount func(p0 context.Context) (int, error) `perm:"web,admin"`

		GetAssetDownloadResults func(p0 context.Context, p1 string, p2 time.Time, p3 time.Time) (*types.ListAssetDownloadRsp, error) `perm:"web,admin"`

		GetAssetListForBucket func(p0 context.Context, p1 uint32) ([]string, error) `perm:"edge,candidate"`

		GetAssetRecord func(p0 context.Context, p1 string) (*types.AssetRecord, error) `perm:"web,admin"`

		GetAssetRecords func(p0 context.Context, p1 int, p2 int, p3 []string, p4 dtypes.ServerID) ([]*types.AssetRecord, error) `perm:"web,admin"`

		GetAssetRecordsByDateRange func(p0 context.Context, p1 int, p2 int, p3 time.Time, p4 time.Time) (*types.ListAssetRecordRsp, error) `perm:"web,admin"`

		GetAssetRecordsWithCIDs func(p0 context.Context, p1 []string) ([]*types.AssetRecord, error) `perm:"web,admin"`

		GetAssetsForNode func(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListNodeAssetRsp, error) `perm:"web,admin"`

		GetDownloadResultsFromAssets func(p0 context.Context, p1 []string, p2 time.Time, p3 time.Time) ([]*types.AssetDownloadResultRsp, error) `perm:"web,admin"`

		GetFailedReplicaByCID func(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListAssetReplicaEventRsp, error) `perm:"web,admin"`

		GetFailedReplicaByNode func(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListAssetReplicaEventRsp, error) `perm:"web,admin"`

		GetNodeAssetReplicasByHashes func(p0 context.Context, p1 string, p2 []string) ([]*types.ReplicaInfo, error) `perm:"web,admin"`

		GetReplicaEventsForNode func(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListAssetReplicaEventRsp, error) `perm:"web,admin"`

		GetReplicas func(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListReplicaRsp, error) `perm:"web,admin"`

		GetReplicasForNode func(p0 context.Context, p1 string, p2 int, p3 int, p4 []types.ReplicaStatus) (*types.ListNodeReplicaRsp, error) `perm:"web,admin"`

		GetSucceededReplicaByCID func(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListReplicaRsp, error) `perm:"web,admin"`

		GetSucceededReplicaByNode func(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListReplicaRsp, error) `perm:"web,admin"`

		LoadAWSData func(p0 context.Context, p1 int, p2 int, p3 bool) ([]*types.AWSDataInfo, error) `perm:"web,admin"`

		MinioUploadFileEvent func(p0 context.Context, p1 *types.MinioUploadFileEvent) (error) `perm:"candidate"`

		NodeRemoveAssetResult func(p0 context.Context, p1 types.RemoveAssetResult) (error) `perm:"edge,candidate"`

		PullAsset func(p0 context.Context, p1 *types.PullAssetReq) (error) `perm:"web,admin"`

		RePullFailedAssets func(p0 context.Context, p1 []types.AssetHash) (error) `perm:"admin"`

		RemoveAssetRecord func(p0 context.Context, p1 string) (error) `perm:"admin,web"`

		RemoveAssetRecords func(p0 context.Context, p1 []string) (error) `perm:"admin,web"`

		RemoveAssetReplica func(p0 context.Context, p1 string, p2 string) (error) `perm:"admin"`

		RemoveNodeFailedReplica func(p0 context.Context) (error) `perm:"web,admin"`

		ResetAssetReplicaCount func(p0 context.Context, p1 string, p2 int) (error) `perm:"web,admin"`

		ShareAssetV2 func(p0 context.Context, p1 *types.ShareAssetReq) (*types.ShareAssetRsp, error) `perm:"web,admin,user"`

		StopAssetRecord func(p0 context.Context, p1 []string) (error) `perm:"admin"`

		SwitchFillDiskTimer func(p0 context.Context, p1 bool) (error) `perm:"web,admin"`

		UpdateAssetExpiration func(p0 context.Context, p1 string, p2 time.Time) (error) `perm:"web,admin"`

	}
}

type AssetAPIStub struct {

}

type CandidateStruct struct {

	CommonStruct

	DeviceStruct

	ValidationStruct

	DataSyncStruct

	AssetStruct

	Internal struct {

		CalculateExitProfit func(p0 context.Context) (types.ExitProfitRsp, error) `perm:"default"`

		CheckNetworkConnectable func(p0 context.Context, p1 string, p2 string) (bool, error) `perm:"admin"`

		CheckNetworkConnectivity func(p0 context.Context, p1 string, p2 string) (error) `perm:"default"`

		DeactivateNode func(p0 context.Context) (error) `perm:"default"`

		GetBlocksWithAssetCID func(p0 context.Context, p1 string, p2 int64, p3 int) ([]string, error) `perm:"admin"`

		GetExternalAddress func(p0 context.Context) (string, error) `perm:"default"`

		GetMinioConfig func(p0 context.Context) (*types.MinioConfig, error) `perm:"admin"`

		WaitQuiet func(p0 context.Context) (error) `perm:"admin"`

	}
}

type CandidateStub struct {

	CommonStub

	DeviceStub

	ValidationStub

	DataSyncStub

	AssetStub

}

type CommonStruct struct {

	Internal struct {

		AuthNew func(p0 context.Context, p1 *types.JWTPayload) (string, error) `perm:"admin"`

		AuthVerify func(p0 context.Context, p1 string) (*types.JWTPayload, error) `perm:"default"`

		Closing func(p0 context.Context) (<-chan struct{}, error) `perm:"admin"`

		Discover func(p0 context.Context) (types.OpenRPCDocument, error) `perm:"admin"`

		ExternalServiceAddress func(p0 context.Context, p1 string) (string, error) `perm:"admin"`

		LogAlerts func(p0 context.Context) ([]alerting.Alert, error) `perm:"admin"`

		LogList func(p0 context.Context) ([]string, error) `perm:"admin"`

		LogSetLevel func(p0 context.Context, p1 string, p2 string) (error) `perm:"admin"`

		Session func(p0 context.Context) (uuid.UUID, error) `perm:"edge,candidate,l5"`

		Shutdown func(p0 context.Context) (error) `perm:"admin"`

		Version func(p0 context.Context) (APIVersion, error) `perm:"default"`

	}
}

type CommonStub struct {

}

type DataSyncStruct struct {

	Internal struct {

		CompareBucketHashes func(p0 context.Context, p1 map[uint32]string) ([]uint32, error) `perm:"admin"`

		CompareTopHash func(p0 context.Context, p1 string) (bool, error) `perm:"admin"`

	}
}

type DataSyncStub struct {

}

type DeviceStruct struct {

	Internal struct {

		GetDeviceRunningStat func(p0 context.Context) (*types.DeviceRunningStat, error) `perm:"admin"`

		GetNodeID func(p0 context.Context) (string, error) `perm:"admin"`

		GetNodeInfo func(p0 context.Context) (types.NodeInfo, error) `perm:"admin"`

	}
}

type DeviceStub struct {

}

type EdgeStruct struct {

	CommonStruct

	DeviceStruct

	ValidationStruct

	DataSyncStruct

	AssetStruct

	WorkerdStruct

	Internal struct {

		CreateTunnel func(p0 context.Context, p1 *types.CreateTunnelReq) (error) `perm:"admin"`

		GetEdgeOnlineStateFromScheduler func(p0 context.Context) (bool, error) `perm:"default"`

		Restart func(p0 context.Context) (error) `perm:"admin"`

		UserNATPunch func(p0 context.Context, p1 string, p2 *types.NatPunchReq) (error) `perm:"admin"`

		WaitQuiet func(p0 context.Context) (error) `perm:"admin"`

	}
}

type EdgeStub struct {

	CommonStub

	DeviceStub

	ValidationStub

	DataSyncStub

	AssetStub

	WorkerdStub

}

type L5Struct struct {

	CommonStruct

	Internal struct {

		WaitQuiet func(p0 context.Context) (error) `perm:"admin"`

	}
}

type L5Stub struct {

	CommonStub

}

type LocatorStruct struct {

	CommonStruct

	Internal struct {

		AllocateSchedulerForNode func(p0 context.Context, p1 types.NodeType, p2 string) (string, error) `perm:"default"`

		CandidateDownloadInfos func(p0 context.Context, p1 string) ([]*types.CandidateDownloadInfo, error) `perm:"default"`

		EdgeDownloadInfos func(p0 context.Context, p1 string) ([]*types.EdgeDownloadInfoList, error) `perm:"default"`

		GetAccessPoints func(p0 context.Context, p1 string, p2 string) ([]string, error) `perm:"default"`

		GetAccessPointsV2 func(p0 context.Context, p1 string, p2 string) (*types.AccessPointRsp, error) `perm:"default"`

		GetAssetSourceDownloadInfos func(p0 context.Context, p1 string) ([]*types.AssetSourceDownloadInfoRsp, error) `perm:"default"`

		GetCandidateIP func(p0 context.Context, p1 string) (string, error) `perm:"admin"`

		GetDeploymentCandidateIP func(p0 context.Context, p1 string) (string, error) `perm:"default"`

		GetSchedulerWithNode func(p0 context.Context, p1 string) (string, error) `perm:"default"`

		GetUserAccessPoint func(p0 context.Context, p1 string) (*AccessPoint, error) `perm:"default"`

	}
}

type LocatorStub struct {

	CommonStub

}

type NodeAPIStruct struct {

	Internal struct {

		CalculateDowntimePenalty func(p0 context.Context, p1 string) (types.ExitProfitRsp, error) `perm:"web,admin,candidate"`

		CalculateExitProfit func(p0 context.Context, p1 string) (types.ExitProfitRsp, error) `perm:"web,admin,candidate"`

		CandidateConnect func(p0 context.Context, p1 *types.ConnectOptions) (error) `perm:"candidate"`

		CheckIpUsage func(p0 context.Context, p1 string) (bool, error) `perm:"admin,web,locator"`

		CleanupNode func(p0 context.Context, p1 string, p2 string) (error) `perm:"web,admin"`

		CreateTunnel func(p0 context.Context, p1 *types.CreateTunnelReq) (error) `perm:"candidate"`

		DeactivateNode func(p0 context.Context, p1 string, p2 int) (error) `perm:"web,admin,candidate"`

		DownloadDataResult func(p0 context.Context, p1 string, p2 string, p3 int64) (error) `perm:"edge,candidate"`

		EdgeConnect func(p0 context.Context, p1 *types.ConnectOptions) (error) `perm:"edge"`

		ForceNodeOffline func(p0 context.Context, p1 string, p2 bool) (error) `perm:"web,admin"`

		FreeUpDiskSpace func(p0 context.Context, p1 string, p2 int64) (*types.FreeUpDiskResp, error) `perm:"edge,candidate,admin"`

		GetAssetSourceDownloadInfo func(p0 context.Context, p1 string) (*types.AssetSourceDownloadInfoRsp, error) `perm:"edge,candidate,web,locator"`

		GetAssetView func(p0 context.Context, p1 string, p2 bool) (*types.AssetView, error) `perm:"admin"`

		GetAssetsInBucket func(p0 context.Context, p1 string, p2 int, p3 bool) ([]string, error) `perm:"admin"`

		GetCandidateDownloadInfos func(p0 context.Context, p1 string) ([]*types.CandidateDownloadInfo, error) `perm:"edge,candidate,web,locator"`

		GetCandidateIPs func(p0 context.Context) ([]*types.NodeIPInfo, error) `perm:"web,user,admin"`

		GetCandidateNodeIP func(p0 context.Context, p1 string) (string, error) `perm:"web,admin"`

		GetCandidateURLsForDetectNat func(p0 context.Context) ([]string, error) `perm:"default"`

		GetCurrentRegionInfos func(p0 context.Context, p1 string) (map[string]int, error) `perm:"web,admin"`

		GetEdgeDownloadInfos func(p0 context.Context, p1 string) (*types.EdgeDownloadInfoList, error) `perm:"default"`

		GetEdgeExternalServiceAddress func(p0 context.Context, p1 string, p2 string) (string, error) `perm:"admin"`

		GetExternalAddress func(p0 context.Context) (string, error) `perm:"default"`

		GetMinioConfigFromCandidate func(p0 context.Context, p1 string) (*types.MinioConfig, error) `perm:"default"`

		GetNextFreeTime func(p0 context.Context, p1 string) (int64, error) `perm:"edge,candidate,admin"`

		GetNodeInfo func(p0 context.Context, p1 string) (*types.NodeInfo, error) `perm:"web,admin"`

		GetNodeList func(p0 context.Context, p1 int, p2 int) (*types.ListNodesRsp, error) `perm:"web,admin"`

		GetNodeOfIP func(p0 context.Context, p1 string) ([]string, error) `perm:"admin,web,locator"`

		GetNodeOnlineState func(p0 context.Context) (bool, error) `perm:"edge"`

		GetNodeToken func(p0 context.Context, p1 string) (string, error) `perm:"admin"`

		GetNodesFromRegion func(p0 context.Context, p1 string) ([]*types.NodeInfo, error) `perm:"web,admin"`

		GetOnlineNodeCount func(p0 context.Context, p1 types.NodeType) (int, error) `perm:"web,admin"`

		GetProfitDetailsForNode func(p0 context.Context, p1 string, p2 int, p3 int, p4 []int) (*types.ListNodeProfitDetailsRsp, error) `perm:"web,admin"`

		GetTunserverURLFromUser func(p0 context.Context, p1 *types.TunserverReq) (*types.TunserverRsp, error) `perm:"admin,web,locator"`

		L3Connect func(p0 context.Context, p1 *types.ConnectOptions) (error) `perm:"edge"`

		L5Connect func(p0 context.Context, p1 *types.ConnectOptions) (error) `perm:"l5"`

		LoadNodeBandwidthScores func(p0 context.Context, p1 string, p2 time.Time, p3 time.Time, p4 int, p5 int) (*types.ListBandwidthScoreRsp, error) `perm:"user,web,admin"`

		MigrateNodeIn func(p0 context.Context, p1 *types.NodeMigrateInfo) (error) `perm:"web,admin"`

		MigrateNodeOut func(p0 context.Context, p1 string) (*types.NodeMigrateInfo, error) `perm:"web,admin"`

		NatPunch func(p0 context.Context, p1 *types.NatPunchReq) (error) `perm:"default"`

		NodeExists func(p0 context.Context, p1 string) (error) `perm:"web"`

		NodeKeepalive func(p0 context.Context) (*types.KeepaliveRsp, error) `perm:"edge,candidate"`

		NodeKeepaliveV2 func(p0 context.Context) (uuid.UUID, error) `perm:"edge,candidate,l5"`

		NodeKeepaliveV3 func(p0 context.Context, p1 *types.KeepaliveReq) (*types.KeepaliveRsp, error) `perm:"edge,candidate,l5"`

		NodeLogin func(p0 context.Context, p1 string, p2 string) (string, error) `perm:"default"`

		PerformSyncData func(p0 context.Context, p1 string) (error) `perm:"admin"`

		ReDetermineNodeNATType func(p0 context.Context, p1 string) (error) `perm:"admin,web,locator"`

		RecompenseNodeProfit func(p0 context.Context, p1 string, p2 string, p3 float64) (error) `perm:"admin,web,locator"`

		RegisterCandidateNode func(p0 context.Context, p1 string, p2 string, p3 string) (*types.ActivationDetail, error) `perm:"default"`

		RegisterEdgeNode func(p0 context.Context, p1 string, p2 string) (*types.ActivationDetail, error) `perm:"default"`

		RegisterNode func(p0 context.Context, p1 string, p2 string, p3 types.NodeType) (*types.ActivationDetail, error) `perm:"default"`

		RegisterNodeV2 func(p0 context.Context, p1 types.NodeRegister) (*types.ActivationDetail, error) `perm:"default"`

		RequestActivationCodes func(p0 context.Context, p1 types.NodeType, p2 int) ([]*types.NodeActivation, error) `perm:"web,admin"`

		SetTunserverURL func(p0 context.Context, p1 string, p2 string) (error) `perm:"admin,web,locator"`

		UndoNodeDeactivation func(p0 context.Context, p1 string) (error) `perm:"web,admin"`

		UpdateBandwidths func(p0 context.Context, p1 int64, p2 int64) (error) `perm:"edge,candidate"`

		UpdateNodePort func(p0 context.Context, p1 string, p2 string) (error) `perm:"web,admin"`

		UserAssetDownloadResultV2 func(p0 context.Context, p1 *types.RetrieveEvent) (error) `perm:"candidate"`

		VerifyTokenWithLimitCount func(p0 context.Context, p1 string) (*types.JWTPayload, error) `perm:"edge,candidate"`

	}
}

type NodeAPIStub struct {

}

type ProjectAPIStruct struct {

	Internal struct {

		DeleteProject func(p0 context.Context, p1 *types.ProjectReq) (error) `perm:"user,web,admin"`

		DeployProject func(p0 context.Context, p1 *types.DeployProjectReq) (error) `perm:"user,web,admin"`

		GetProjectInfo func(p0 context.Context, p1 string) (*types.ProjectInfo, error) `perm:"user,web,admin"`

		GetProjectInfos func(p0 context.Context, p1 string, p2 int, p3 int) ([]*types.ProjectInfo, error) `perm:"user,web,admin"`

		GetProjectOverviewByNode func(p0 context.Context, p1 *types.NodeProjectReq) (*types.ListProjectOverviewRsp, error) `perm:"web,admin"`

		GetProjectReplicasForNode func(p0 context.Context, p1 *types.NodeProjectReq) (*types.ListProjectReplicaRsp, error) `perm:"web,admin"`

		GetProjectsForNode func(p0 context.Context, p1 string) ([]*types.ProjectReplicas, error) `perm:"edge,candidate,web,locator"`

		RedeployFailedProjects func(p0 context.Context, p1 []string) (error) `perm:"admin"`

		UpdateProject func(p0 context.Context, p1 *types.ProjectReq) (error) `perm:"user,web,admin"`

		UpdateProjectStatus func(p0 context.Context, p1 []*types.Project) (error) `perm:"edge,candidate"`

	}
}

type ProjectAPIStub struct {

}

type SchedulerStruct struct {

	CommonStruct

	AssetAPIStruct

	NodeAPIStruct

	ProjectAPIStruct

	Internal struct {

		AddNodeServiceEvent func(p0 context.Context, p1 *types.ServiceEvent) (error) `perm:"web,admin"`

		AssignTunserverURL func(p0 context.Context) (*types.TunserverRsp, error) `perm:"edge"`

		CandidateCodeExist func(p0 context.Context, p1 string) (bool, error) `perm:"admin,web,locator"`

		DeleteEdgeUpdateConfig func(p0 context.Context, p1 int) (error) `perm:"admin"`

		GenerateCandidateCodes func(p0 context.Context, p1 int, p2 types.NodeType, p3 bool) ([]string, error) `perm:"admin"`

		GetCandidateCodeInfos func(p0 context.Context, p1 string, p2 string) ([]*types.CandidateCodeInfo, error) `perm:"admin,web,locator"`

		GetDeploymentProviderIP func(p0 context.Context, p1 types.DeploymentID) (string, error) `perm:"edge,candidate,web,locator,admin"`

		GetEdgeUpdateConfigs func(p0 context.Context) (map[int]*EdgeUpdateConfig, error) `perm:"edge"`

		GetNodePublicKey func(p0 context.Context, p1 string) (string, error) `perm:"web,admin"`

		GetNodeUploadInfo func(p0 context.Context, p1 string, p2 string, p3 bool) (*types.UploadInfo, error) `perm:"user,web,admin"`

		GetNodeUploadInfoV2 func(p0 context.Context, p1 *types.GetUploadInfoReq) (*types.UploadInfo, error) `perm:"user,web,admin"`

		GetReplicaEvents func(p0 context.Context, p1 time.Time, p2 time.Time, p3 int, p4 int) (*types.ListAssetReplicaEventRsp, error) `perm:"web,admin"`

		GetSchedulerPublicKey func(p0 context.Context) (string, error) `perm:"edge,candidate"`

		GetValidationResults func(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListValidationResultRsp, error) `perm:"web,admin"`

		GetValidators func(p0 context.Context) ([]string, error) `perm:"web,admin"`

		GetWorkloadRecord func(p0 context.Context, p1 string) (*types.WorkloadRecord, error) `perm:"web,admin"`

		GetWorkloadRecords func(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListWorkloadRecordRsp, error) `perm:"web,admin"`

		NodeValidationResult func(p0 context.Context, p1 io.Reader, p2 string) (error) `perm:"edge,candidate"`

		RemoveCandidateCode func(p0 context.Context, p1 string) (error) `perm:"admin,web,locator"`

		ResetCandidateCode func(p0 context.Context, p1 string, p2 string) (error) `perm:"admin,web,locator"`

		SetEdgeUpdateConfig func(p0 context.Context, p1 *EdgeUpdateConfig) (error) `perm:"admin"`

		SubmitProjectReport func(p0 context.Context, p1 *types.ProjectRecordReq) (error) `perm:"candidate"`

		SubmitWorkloadReport func(p0 context.Context, p1 *types.WorkloadRecordReq) (error) `perm:"default"`

		SubmitWorkloadReportV2 func(p0 context.Context, p1 *types.WorkloadRecordReq) (error) `perm:"default"`

		UserAssetDownloadResult func(p0 context.Context, p1 string, p2 string, p3 int64, p4 int64) (error) `perm:"candidate"`

	}
}

type SchedulerStub struct {

	CommonStub

	AssetAPIStub

	NodeAPIStub

	ProjectAPIStub

}

type ValidationStruct struct {

	Internal struct {

		ExecuteValidation func(p0 context.Context, p1 *ValidateReq) (error) `perm:"admin"`

	}
}

type ValidationStub struct {

}

type WorkerdStruct struct {

	Internal struct {

		Delete func(p0 context.Context, p1 string) (error) `perm:"admin"`

		Deploy func(p0 context.Context, p1 *types.Project) (error) `perm:"admin"`

		Query func(p0 context.Context, p1 []string) ([]*types.Project, error) `perm:"admin"`

		Update func(p0 context.Context, p1 *types.Project) (error) `perm:"admin"`

	}
}

type WorkerdStub struct {

}





func (s *AssetStruct) AddAssetView(p0 context.Context, p1 []string) (error) {
	if s.Internal.AddAssetView == nil {
		return ErrNotSupported
	}
	return s.Internal.AddAssetView(p0, p1)
}

func (s *AssetStub) AddAssetView(p0 context.Context, p1 []string) (error) {
	return ErrNotSupported
}

func (s *AssetStruct) ClearFreeUpDisk(p0 context.Context) (error) {
	if s.Internal.ClearFreeUpDisk == nil {
		return ErrNotSupported
	}
	return s.Internal.ClearFreeUpDisk(p0)
}

func (s *AssetStub) ClearFreeUpDisk(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *AssetStruct) CreateAsset(p0 context.Context, p1 *types.AuthUserUploadDownloadAsset) (string, error) {
	if s.Internal.CreateAsset == nil {
		return "", ErrNotSupported
	}
	return s.Internal.CreateAsset(p0, p1)
}

func (s *AssetStub) CreateAsset(p0 context.Context, p1 *types.AuthUserUploadDownloadAsset) (string, error) {
	return "", ErrNotSupported
}

func (s *AssetStruct) DeleteAsset(p0 context.Context, p1 string) (error) {
	if s.Internal.DeleteAsset == nil {
		return ErrNotSupported
	}
	return s.Internal.DeleteAsset(p0, p1)
}

func (s *AssetStub) DeleteAsset(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *AssetStruct) GetAssetProgresses(p0 context.Context, p1 []string) (*types.PullResult, error) {
	if s.Internal.GetAssetProgresses == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetAssetProgresses(p0, p1)
}

func (s *AssetStub) GetAssetProgresses(p0 context.Context, p1 []string) (*types.PullResult, error) {
	return nil, ErrNotSupported
}

func (s *AssetStruct) GetAssetStats(p0 context.Context) (*types.AssetStats, error) {
	if s.Internal.GetAssetStats == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetAssetStats(p0)
}

func (s *AssetStub) GetAssetStats(p0 context.Context) (*types.AssetStats, error) {
	return nil, ErrNotSupported
}

func (s *AssetStruct) GetAssetView(p0 context.Context) (*types.AssetView, error) {
	if s.Internal.GetAssetView == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetAssetView(p0)
}

func (s *AssetStub) GetAssetView(p0 context.Context) (*types.AssetView, error) {
	return nil, ErrNotSupported
}

func (s *AssetStruct) GetAssetsInBucket(p0 context.Context, p1 int) ([]string, error) {
	if s.Internal.GetAssetsInBucket == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GetAssetsInBucket(p0, p1)
}

func (s *AssetStub) GetAssetsInBucket(p0 context.Context, p1 int) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *AssetStruct) GetPullingAssetInfo(p0 context.Context) (*types.InProgressAsset, error) {
	if s.Internal.GetPullingAssetInfo == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetPullingAssetInfo(p0)
}

func (s *AssetStub) GetPullingAssetInfo(p0 context.Context) (*types.InProgressAsset, error) {
	return nil, ErrNotSupported
}

func (s *AssetStruct) PullAsset(p0 context.Context, p1 string, p2 []*types.CandidateDownloadInfo) (error) {
	if s.Internal.PullAsset == nil {
		return ErrNotSupported
	}
	return s.Internal.PullAsset(p0, p1, p2)
}

func (s *AssetStub) PullAsset(p0 context.Context, p1 string, p2 []*types.CandidateDownloadInfo) (error) {
	return ErrNotSupported
}

func (s *AssetStruct) PullAssetFromAWS(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.PullAssetFromAWS == nil {
		return ErrNotSupported
	}
	return s.Internal.PullAssetFromAWS(p0, p1, p2)
}

func (s *AssetStub) PullAssetFromAWS(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *AssetStruct) PullAssetV2(p0 context.Context, p1 *types.AssetPullRequest) (error) {
	if s.Internal.PullAssetV2 == nil {
		return ErrNotSupported
	}
	return s.Internal.PullAssetV2(p0, p1)
}

func (s *AssetStub) PullAssetV2(p0 context.Context, p1 *types.AssetPullRequest) (error) {
	return ErrNotSupported
}

func (s *AssetStruct) RequestFreeUpDisk(p0 context.Context, p1 float64) (error) {
	if s.Internal.RequestFreeUpDisk == nil {
		return ErrNotSupported
	}
	return s.Internal.RequestFreeUpDisk(p0, p1)
}

func (s *AssetStub) RequestFreeUpDisk(p0 context.Context, p1 float64) (error) {
	return ErrNotSupported
}

func (s *AssetStruct) StateFreeUpDisk(p0 context.Context) (*types.FreeUpDiskStateResp, error) {
	if s.Internal.StateFreeUpDisk == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.StateFreeUpDisk(p0)
}

func (s *AssetStub) StateFreeUpDisk(p0 context.Context) (*types.FreeUpDiskStateResp, error) {
	return nil, ErrNotSupported
}

func (s *AssetStruct) SyncAssetViewAndData(p0 context.Context) (error) {
	if s.Internal.SyncAssetViewAndData == nil {
		return ErrNotSupported
	}
	return s.Internal.SyncAssetViewAndData(p0)
}

func (s *AssetStub) SyncAssetViewAndData(p0 context.Context) (error) {
	return ErrNotSupported
}




func (s *AssetAPIStruct) AddAWSData(p0 context.Context, p1 []types.AWSDataInfo) (error) {
	if s.Internal.AddAWSData == nil {
		return ErrNotSupported
	}
	return s.Internal.AddAWSData(p0, p1)
}

func (s *AssetAPIStub) AddAWSData(p0 context.Context, p1 []types.AWSDataInfo) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) CreateAsset(p0 context.Context, p1 *types.CreateAssetReq) (*types.UploadInfo, error) {
	if s.Internal.CreateAsset == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.CreateAsset(p0, p1)
}

func (s *AssetAPIStub) CreateAsset(p0 context.Context, p1 *types.CreateAssetReq) (*types.UploadInfo, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) CreateSyncAsset(p0 context.Context, p1 *types.CreateSyncAssetReq) (error) {
	if s.Internal.CreateSyncAsset == nil {
		return ErrNotSupported
	}
	return s.Internal.CreateSyncAsset(p0, p1)
}

func (s *AssetAPIStub) CreateSyncAsset(p0 context.Context, p1 *types.CreateSyncAssetReq) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) GenerateTokenForDownloadSource(p0 context.Context, p1 string, p2 string) (*types.SourceDownloadInfo, error) {
	if s.Internal.GenerateTokenForDownloadSource == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GenerateTokenForDownloadSource(p0, p1, p2)
}

func (s *AssetAPIStub) GenerateTokenForDownloadSource(p0 context.Context, p1 string, p2 string) (*types.SourceDownloadInfo, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GenerateTokenForDownloadSources(p0 context.Context, p1 string) ([]*types.SourceDownloadInfo, error) {
	if s.Internal.GenerateTokenForDownloadSources == nil {
		return *new([]*types.SourceDownloadInfo), ErrNotSupported
	}
	return s.Internal.GenerateTokenForDownloadSources(p0, p1)
}

func (s *AssetAPIStub) GenerateTokenForDownloadSources(p0 context.Context, p1 string) ([]*types.SourceDownloadInfo, error) {
	return *new([]*types.SourceDownloadInfo), ErrNotSupported
}

func (s *AssetAPIStruct) GetActiveAssetRecords(p0 context.Context, p1 int, p2 int) (*types.ListAssetRecordRsp, error) {
	if s.Internal.GetActiveAssetRecords == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetActiveAssetRecords(p0, p1, p2)
}

func (s *AssetAPIStub) GetActiveAssetRecords(p0 context.Context, p1 int, p2 int) (*types.ListAssetRecordRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GetAssetCount(p0 context.Context) (int, error) {
	if s.Internal.GetAssetCount == nil {
		return 0, ErrNotSupported
	}
	return s.Internal.GetAssetCount(p0)
}

func (s *AssetAPIStub) GetAssetCount(p0 context.Context) (int, error) {
	return 0, ErrNotSupported
}

func (s *AssetAPIStruct) GetAssetDownloadResults(p0 context.Context, p1 string, p2 time.Time, p3 time.Time) (*types.ListAssetDownloadRsp, error) {
	if s.Internal.GetAssetDownloadResults == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetAssetDownloadResults(p0, p1, p2, p3)
}

func (s *AssetAPIStub) GetAssetDownloadResults(p0 context.Context, p1 string, p2 time.Time, p3 time.Time) (*types.ListAssetDownloadRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GetAssetListForBucket(p0 context.Context, p1 uint32) ([]string, error) {
	if s.Internal.GetAssetListForBucket == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GetAssetListForBucket(p0, p1)
}

func (s *AssetAPIStub) GetAssetListForBucket(p0 context.Context, p1 uint32) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *AssetAPIStruct) GetAssetRecord(p0 context.Context, p1 string) (*types.AssetRecord, error) {
	if s.Internal.GetAssetRecord == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetAssetRecord(p0, p1)
}

func (s *AssetAPIStub) GetAssetRecord(p0 context.Context, p1 string) (*types.AssetRecord, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GetAssetRecords(p0 context.Context, p1 int, p2 int, p3 []string, p4 dtypes.ServerID) ([]*types.AssetRecord, error) {
	if s.Internal.GetAssetRecords == nil {
		return *new([]*types.AssetRecord), ErrNotSupported
	}
	return s.Internal.GetAssetRecords(p0, p1, p2, p3, p4)
}

func (s *AssetAPIStub) GetAssetRecords(p0 context.Context, p1 int, p2 int, p3 []string, p4 dtypes.ServerID) ([]*types.AssetRecord, error) {
	return *new([]*types.AssetRecord), ErrNotSupported
}

func (s *AssetAPIStruct) GetAssetRecordsByDateRange(p0 context.Context, p1 int, p2 int, p3 time.Time, p4 time.Time) (*types.ListAssetRecordRsp, error) {
	if s.Internal.GetAssetRecordsByDateRange == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetAssetRecordsByDateRange(p0, p1, p2, p3, p4)
}

func (s *AssetAPIStub) GetAssetRecordsByDateRange(p0 context.Context, p1 int, p2 int, p3 time.Time, p4 time.Time) (*types.ListAssetRecordRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GetAssetRecordsWithCIDs(p0 context.Context, p1 []string) ([]*types.AssetRecord, error) {
	if s.Internal.GetAssetRecordsWithCIDs == nil {
		return *new([]*types.AssetRecord), ErrNotSupported
	}
	return s.Internal.GetAssetRecordsWithCIDs(p0, p1)
}

func (s *AssetAPIStub) GetAssetRecordsWithCIDs(p0 context.Context, p1 []string) ([]*types.AssetRecord, error) {
	return *new([]*types.AssetRecord), ErrNotSupported
}

func (s *AssetAPIStruct) GetAssetsForNode(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListNodeAssetRsp, error) {
	if s.Internal.GetAssetsForNode == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetAssetsForNode(p0, p1, p2, p3)
}

func (s *AssetAPIStub) GetAssetsForNode(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListNodeAssetRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GetDownloadResultsFromAssets(p0 context.Context, p1 []string, p2 time.Time, p3 time.Time) ([]*types.AssetDownloadResultRsp, error) {
	if s.Internal.GetDownloadResultsFromAssets == nil {
		return *new([]*types.AssetDownloadResultRsp), ErrNotSupported
	}
	return s.Internal.GetDownloadResultsFromAssets(p0, p1, p2, p3)
}

func (s *AssetAPIStub) GetDownloadResultsFromAssets(p0 context.Context, p1 []string, p2 time.Time, p3 time.Time) ([]*types.AssetDownloadResultRsp, error) {
	return *new([]*types.AssetDownloadResultRsp), ErrNotSupported
}

func (s *AssetAPIStruct) GetFailedReplicaByCID(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListAssetReplicaEventRsp, error) {
	if s.Internal.GetFailedReplicaByCID == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetFailedReplicaByCID(p0, p1, p2, p3)
}

func (s *AssetAPIStub) GetFailedReplicaByCID(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListAssetReplicaEventRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GetFailedReplicaByNode(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListAssetReplicaEventRsp, error) {
	if s.Internal.GetFailedReplicaByNode == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetFailedReplicaByNode(p0, p1, p2, p3)
}

func (s *AssetAPIStub) GetFailedReplicaByNode(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListAssetReplicaEventRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GetNodeAssetReplicasByHashes(p0 context.Context, p1 string, p2 []string) ([]*types.ReplicaInfo, error) {
	if s.Internal.GetNodeAssetReplicasByHashes == nil {
		return *new([]*types.ReplicaInfo), ErrNotSupported
	}
	return s.Internal.GetNodeAssetReplicasByHashes(p0, p1, p2)
}

func (s *AssetAPIStub) GetNodeAssetReplicasByHashes(p0 context.Context, p1 string, p2 []string) ([]*types.ReplicaInfo, error) {
	return *new([]*types.ReplicaInfo), ErrNotSupported
}

func (s *AssetAPIStruct) GetReplicaEventsForNode(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListAssetReplicaEventRsp, error) {
	if s.Internal.GetReplicaEventsForNode == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetReplicaEventsForNode(p0, p1, p2, p3)
}

func (s *AssetAPIStub) GetReplicaEventsForNode(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListAssetReplicaEventRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GetReplicas(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListReplicaRsp, error) {
	if s.Internal.GetReplicas == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetReplicas(p0, p1, p2, p3)
}

func (s *AssetAPIStub) GetReplicas(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListReplicaRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GetReplicasForNode(p0 context.Context, p1 string, p2 int, p3 int, p4 []types.ReplicaStatus) (*types.ListNodeReplicaRsp, error) {
	if s.Internal.GetReplicasForNode == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetReplicasForNode(p0, p1, p2, p3, p4)
}

func (s *AssetAPIStub) GetReplicasForNode(p0 context.Context, p1 string, p2 int, p3 int, p4 []types.ReplicaStatus) (*types.ListNodeReplicaRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GetSucceededReplicaByCID(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListReplicaRsp, error) {
	if s.Internal.GetSucceededReplicaByCID == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetSucceededReplicaByCID(p0, p1, p2, p3)
}

func (s *AssetAPIStub) GetSucceededReplicaByCID(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListReplicaRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) GetSucceededReplicaByNode(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListReplicaRsp, error) {
	if s.Internal.GetSucceededReplicaByNode == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetSucceededReplicaByNode(p0, p1, p2, p3)
}

func (s *AssetAPIStub) GetSucceededReplicaByNode(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListReplicaRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) LoadAWSData(p0 context.Context, p1 int, p2 int, p3 bool) ([]*types.AWSDataInfo, error) {
	if s.Internal.LoadAWSData == nil {
		return *new([]*types.AWSDataInfo), ErrNotSupported
	}
	return s.Internal.LoadAWSData(p0, p1, p2, p3)
}

func (s *AssetAPIStub) LoadAWSData(p0 context.Context, p1 int, p2 int, p3 bool) ([]*types.AWSDataInfo, error) {
	return *new([]*types.AWSDataInfo), ErrNotSupported
}

func (s *AssetAPIStruct) MinioUploadFileEvent(p0 context.Context, p1 *types.MinioUploadFileEvent) (error) {
	if s.Internal.MinioUploadFileEvent == nil {
		return ErrNotSupported
	}
	return s.Internal.MinioUploadFileEvent(p0, p1)
}

func (s *AssetAPIStub) MinioUploadFileEvent(p0 context.Context, p1 *types.MinioUploadFileEvent) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) NodeRemoveAssetResult(p0 context.Context, p1 types.RemoveAssetResult) (error) {
	if s.Internal.NodeRemoveAssetResult == nil {
		return ErrNotSupported
	}
	return s.Internal.NodeRemoveAssetResult(p0, p1)
}

func (s *AssetAPIStub) NodeRemoveAssetResult(p0 context.Context, p1 types.RemoveAssetResult) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) PullAsset(p0 context.Context, p1 *types.PullAssetReq) (error) {
	if s.Internal.PullAsset == nil {
		return ErrNotSupported
	}
	return s.Internal.PullAsset(p0, p1)
}

func (s *AssetAPIStub) PullAsset(p0 context.Context, p1 *types.PullAssetReq) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) RePullFailedAssets(p0 context.Context, p1 []types.AssetHash) (error) {
	if s.Internal.RePullFailedAssets == nil {
		return ErrNotSupported
	}
	return s.Internal.RePullFailedAssets(p0, p1)
}

func (s *AssetAPIStub) RePullFailedAssets(p0 context.Context, p1 []types.AssetHash) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) RemoveAssetRecord(p0 context.Context, p1 string) (error) {
	if s.Internal.RemoveAssetRecord == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveAssetRecord(p0, p1)
}

func (s *AssetAPIStub) RemoveAssetRecord(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) RemoveAssetRecords(p0 context.Context, p1 []string) (error) {
	if s.Internal.RemoveAssetRecords == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveAssetRecords(p0, p1)
}

func (s *AssetAPIStub) RemoveAssetRecords(p0 context.Context, p1 []string) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) RemoveAssetReplica(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.RemoveAssetReplica == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveAssetReplica(p0, p1, p2)
}

func (s *AssetAPIStub) RemoveAssetReplica(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) RemoveNodeFailedReplica(p0 context.Context) (error) {
	if s.Internal.RemoveNodeFailedReplica == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveNodeFailedReplica(p0)
}

func (s *AssetAPIStub) RemoveNodeFailedReplica(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) ResetAssetReplicaCount(p0 context.Context, p1 string, p2 int) (error) {
	if s.Internal.ResetAssetReplicaCount == nil {
		return ErrNotSupported
	}
	return s.Internal.ResetAssetReplicaCount(p0, p1, p2)
}

func (s *AssetAPIStub) ResetAssetReplicaCount(p0 context.Context, p1 string, p2 int) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) ShareAssetV2(p0 context.Context, p1 *types.ShareAssetReq) (*types.ShareAssetRsp, error) {
	if s.Internal.ShareAssetV2 == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ShareAssetV2(p0, p1)
}

func (s *AssetAPIStub) ShareAssetV2(p0 context.Context, p1 *types.ShareAssetReq) (*types.ShareAssetRsp, error) {
	return nil, ErrNotSupported
}

func (s *AssetAPIStruct) StopAssetRecord(p0 context.Context, p1 []string) (error) {
	if s.Internal.StopAssetRecord == nil {
		return ErrNotSupported
	}
	return s.Internal.StopAssetRecord(p0, p1)
}

func (s *AssetAPIStub) StopAssetRecord(p0 context.Context, p1 []string) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) SwitchFillDiskTimer(p0 context.Context, p1 bool) (error) {
	if s.Internal.SwitchFillDiskTimer == nil {
		return ErrNotSupported
	}
	return s.Internal.SwitchFillDiskTimer(p0, p1)
}

func (s *AssetAPIStub) SwitchFillDiskTimer(p0 context.Context, p1 bool) (error) {
	return ErrNotSupported
}

func (s *AssetAPIStruct) UpdateAssetExpiration(p0 context.Context, p1 string, p2 time.Time) (error) {
	if s.Internal.UpdateAssetExpiration == nil {
		return ErrNotSupported
	}
	return s.Internal.UpdateAssetExpiration(p0, p1, p2)
}

func (s *AssetAPIStub) UpdateAssetExpiration(p0 context.Context, p1 string, p2 time.Time) (error) {
	return ErrNotSupported
}




func (s *CandidateStruct) CalculateExitProfit(p0 context.Context) (types.ExitProfitRsp, error) {
	if s.Internal.CalculateExitProfit == nil {
		return *new(types.ExitProfitRsp), ErrNotSupported
	}
	return s.Internal.CalculateExitProfit(p0)
}

func (s *CandidateStub) CalculateExitProfit(p0 context.Context) (types.ExitProfitRsp, error) {
	return *new(types.ExitProfitRsp), ErrNotSupported
}

func (s *CandidateStruct) CheckNetworkConnectable(p0 context.Context, p1 string, p2 string) (bool, error) {
	if s.Internal.CheckNetworkConnectable == nil {
		return false, ErrNotSupported
	}
	return s.Internal.CheckNetworkConnectable(p0, p1, p2)
}

func (s *CandidateStub) CheckNetworkConnectable(p0 context.Context, p1 string, p2 string) (bool, error) {
	return false, ErrNotSupported
}

func (s *CandidateStruct) CheckNetworkConnectivity(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.CheckNetworkConnectivity == nil {
		return ErrNotSupported
	}
	return s.Internal.CheckNetworkConnectivity(p0, p1, p2)
}

func (s *CandidateStub) CheckNetworkConnectivity(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *CandidateStruct) DeactivateNode(p0 context.Context) (error) {
	if s.Internal.DeactivateNode == nil {
		return ErrNotSupported
	}
	return s.Internal.DeactivateNode(p0)
}

func (s *CandidateStub) DeactivateNode(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *CandidateStruct) GetBlocksWithAssetCID(p0 context.Context, p1 string, p2 int64, p3 int) ([]string, error) {
	if s.Internal.GetBlocksWithAssetCID == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GetBlocksWithAssetCID(p0, p1, p2, p3)
}

func (s *CandidateStub) GetBlocksWithAssetCID(p0 context.Context, p1 string, p2 int64, p3 int) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *CandidateStruct) GetExternalAddress(p0 context.Context) (string, error) {
	if s.Internal.GetExternalAddress == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetExternalAddress(p0)
}

func (s *CandidateStub) GetExternalAddress(p0 context.Context) (string, error) {
	return "", ErrNotSupported
}

func (s *CandidateStruct) GetMinioConfig(p0 context.Context) (*types.MinioConfig, error) {
	if s.Internal.GetMinioConfig == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetMinioConfig(p0)
}

func (s *CandidateStub) GetMinioConfig(p0 context.Context) (*types.MinioConfig, error) {
	return nil, ErrNotSupported
}

func (s *CandidateStruct) WaitQuiet(p0 context.Context) (error) {
	if s.Internal.WaitQuiet == nil {
		return ErrNotSupported
	}
	return s.Internal.WaitQuiet(p0)
}

func (s *CandidateStub) WaitQuiet(p0 context.Context) (error) {
	return ErrNotSupported
}




func (s *CommonStruct) AuthNew(p0 context.Context, p1 *types.JWTPayload) (string, error) {
	if s.Internal.AuthNew == nil {
		return "", ErrNotSupported
	}
	return s.Internal.AuthNew(p0, p1)
}

func (s *CommonStub) AuthNew(p0 context.Context, p1 *types.JWTPayload) (string, error) {
	return "", ErrNotSupported
}

func (s *CommonStruct) AuthVerify(p0 context.Context, p1 string) (*types.JWTPayload, error) {
	if s.Internal.AuthVerify == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.AuthVerify(p0, p1)
}

func (s *CommonStub) AuthVerify(p0 context.Context, p1 string) (*types.JWTPayload, error) {
	return nil, ErrNotSupported
}

func (s *CommonStruct) Closing(p0 context.Context) (<-chan struct{}, error) {
	if s.Internal.Closing == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.Closing(p0)
}

func (s *CommonStub) Closing(p0 context.Context) (<-chan struct{}, error) {
	return nil, ErrNotSupported
}

func (s *CommonStruct) Discover(p0 context.Context) (types.OpenRPCDocument, error) {
	if s.Internal.Discover == nil {
		return *new(types.OpenRPCDocument), ErrNotSupported
	}
	return s.Internal.Discover(p0)
}

func (s *CommonStub) Discover(p0 context.Context) (types.OpenRPCDocument, error) {
	return *new(types.OpenRPCDocument), ErrNotSupported
}

func (s *CommonStruct) ExternalServiceAddress(p0 context.Context, p1 string) (string, error) {
	if s.Internal.ExternalServiceAddress == nil {
		return "", ErrNotSupported
	}
	return s.Internal.ExternalServiceAddress(p0, p1)
}

func (s *CommonStub) ExternalServiceAddress(p0 context.Context, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *CommonStruct) LogAlerts(p0 context.Context) ([]alerting.Alert, error) {
	if s.Internal.LogAlerts == nil {
		return *new([]alerting.Alert), ErrNotSupported
	}
	return s.Internal.LogAlerts(p0)
}

func (s *CommonStub) LogAlerts(p0 context.Context) ([]alerting.Alert, error) {
	return *new([]alerting.Alert), ErrNotSupported
}

func (s *CommonStruct) LogList(p0 context.Context) ([]string, error) {
	if s.Internal.LogList == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.LogList(p0)
}

func (s *CommonStub) LogList(p0 context.Context) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *CommonStruct) LogSetLevel(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.LogSetLevel == nil {
		return ErrNotSupported
	}
	return s.Internal.LogSetLevel(p0, p1, p2)
}

func (s *CommonStub) LogSetLevel(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *CommonStruct) Session(p0 context.Context) (uuid.UUID, error) {
	if s.Internal.Session == nil {
		return *new(uuid.UUID), ErrNotSupported
	}
	return s.Internal.Session(p0)
}

func (s *CommonStub) Session(p0 context.Context) (uuid.UUID, error) {
	return *new(uuid.UUID), ErrNotSupported
}

func (s *CommonStruct) Shutdown(p0 context.Context) (error) {
	if s.Internal.Shutdown == nil {
		return ErrNotSupported
	}
	return s.Internal.Shutdown(p0)
}

func (s *CommonStub) Shutdown(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *CommonStruct) Version(p0 context.Context) (APIVersion, error) {
	if s.Internal.Version == nil {
		return *new(APIVersion), ErrNotSupported
	}
	return s.Internal.Version(p0)
}

func (s *CommonStub) Version(p0 context.Context) (APIVersion, error) {
	return *new(APIVersion), ErrNotSupported
}




func (s *DataSyncStruct) CompareBucketHashes(p0 context.Context, p1 map[uint32]string) ([]uint32, error) {
	if s.Internal.CompareBucketHashes == nil {
		return *new([]uint32), ErrNotSupported
	}
	return s.Internal.CompareBucketHashes(p0, p1)
}

func (s *DataSyncStub) CompareBucketHashes(p0 context.Context, p1 map[uint32]string) ([]uint32, error) {
	return *new([]uint32), ErrNotSupported
}

func (s *DataSyncStruct) CompareTopHash(p0 context.Context, p1 string) (bool, error) {
	if s.Internal.CompareTopHash == nil {
		return false, ErrNotSupported
	}
	return s.Internal.CompareTopHash(p0, p1)
}

func (s *DataSyncStub) CompareTopHash(p0 context.Context, p1 string) (bool, error) {
	return false, ErrNotSupported
}




func (s *DeviceStruct) GetDeviceRunningStat(p0 context.Context) (*types.DeviceRunningStat, error) {
	if s.Internal.GetDeviceRunningStat == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetDeviceRunningStat(p0)
}

func (s *DeviceStub) GetDeviceRunningStat(p0 context.Context) (*types.DeviceRunningStat, error) {
	return nil, ErrNotSupported
}

func (s *DeviceStruct) GetNodeID(p0 context.Context) (string, error) {
	if s.Internal.GetNodeID == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetNodeID(p0)
}

func (s *DeviceStub) GetNodeID(p0 context.Context) (string, error) {
	return "", ErrNotSupported
}

func (s *DeviceStruct) GetNodeInfo(p0 context.Context) (types.NodeInfo, error) {
	if s.Internal.GetNodeInfo == nil {
		return *new(types.NodeInfo), ErrNotSupported
	}
	return s.Internal.GetNodeInfo(p0)
}

func (s *DeviceStub) GetNodeInfo(p0 context.Context) (types.NodeInfo, error) {
	return *new(types.NodeInfo), ErrNotSupported
}




func (s *EdgeStruct) CreateTunnel(p0 context.Context, p1 *types.CreateTunnelReq) (error) {
	if s.Internal.CreateTunnel == nil {
		return ErrNotSupported
	}
	return s.Internal.CreateTunnel(p0, p1)
}

func (s *EdgeStub) CreateTunnel(p0 context.Context, p1 *types.CreateTunnelReq) (error) {
	return ErrNotSupported
}

func (s *EdgeStruct) GetEdgeOnlineStateFromScheduler(p0 context.Context) (bool, error) {
	if s.Internal.GetEdgeOnlineStateFromScheduler == nil {
		return false, ErrNotSupported
	}
	return s.Internal.GetEdgeOnlineStateFromScheduler(p0)
}

func (s *EdgeStub) GetEdgeOnlineStateFromScheduler(p0 context.Context) (bool, error) {
	return false, ErrNotSupported
}

func (s *EdgeStruct) Restart(p0 context.Context) (error) {
	if s.Internal.Restart == nil {
		return ErrNotSupported
	}
	return s.Internal.Restart(p0)
}

func (s *EdgeStub) Restart(p0 context.Context) (error) {
	return ErrNotSupported
}

func (s *EdgeStruct) UserNATPunch(p0 context.Context, p1 string, p2 *types.NatPunchReq) (error) {
	if s.Internal.UserNATPunch == nil {
		return ErrNotSupported
	}
	return s.Internal.UserNATPunch(p0, p1, p2)
}

func (s *EdgeStub) UserNATPunch(p0 context.Context, p1 string, p2 *types.NatPunchReq) (error) {
	return ErrNotSupported
}

func (s *EdgeStruct) WaitQuiet(p0 context.Context) (error) {
	if s.Internal.WaitQuiet == nil {
		return ErrNotSupported
	}
	return s.Internal.WaitQuiet(p0)
}

func (s *EdgeStub) WaitQuiet(p0 context.Context) (error) {
	return ErrNotSupported
}




func (s *L5Struct) WaitQuiet(p0 context.Context) (error) {
	if s.Internal.WaitQuiet == nil {
		return ErrNotSupported
	}
	return s.Internal.WaitQuiet(p0)
}

func (s *L5Stub) WaitQuiet(p0 context.Context) (error) {
	return ErrNotSupported
}




func (s *LocatorStruct) AllocateSchedulerForNode(p0 context.Context, p1 types.NodeType, p2 string) (string, error) {
	if s.Internal.AllocateSchedulerForNode == nil {
		return "", ErrNotSupported
	}
	return s.Internal.AllocateSchedulerForNode(p0, p1, p2)
}

func (s *LocatorStub) AllocateSchedulerForNode(p0 context.Context, p1 types.NodeType, p2 string) (string, error) {
	return "", ErrNotSupported
}

func (s *LocatorStruct) CandidateDownloadInfos(p0 context.Context, p1 string) ([]*types.CandidateDownloadInfo, error) {
	if s.Internal.CandidateDownloadInfos == nil {
		return *new([]*types.CandidateDownloadInfo), ErrNotSupported
	}
	return s.Internal.CandidateDownloadInfos(p0, p1)
}

func (s *LocatorStub) CandidateDownloadInfos(p0 context.Context, p1 string) ([]*types.CandidateDownloadInfo, error) {
	return *new([]*types.CandidateDownloadInfo), ErrNotSupported
}

func (s *LocatorStruct) EdgeDownloadInfos(p0 context.Context, p1 string) ([]*types.EdgeDownloadInfoList, error) {
	if s.Internal.EdgeDownloadInfos == nil {
		return *new([]*types.EdgeDownloadInfoList), ErrNotSupported
	}
	return s.Internal.EdgeDownloadInfos(p0, p1)
}

func (s *LocatorStub) EdgeDownloadInfos(p0 context.Context, p1 string) ([]*types.EdgeDownloadInfoList, error) {
	return *new([]*types.EdgeDownloadInfoList), ErrNotSupported
}

func (s *LocatorStruct) GetAccessPoints(p0 context.Context, p1 string, p2 string) ([]string, error) {
	if s.Internal.GetAccessPoints == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GetAccessPoints(p0, p1, p2)
}

func (s *LocatorStub) GetAccessPoints(p0 context.Context, p1 string, p2 string) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *LocatorStruct) GetAccessPointsV2(p0 context.Context, p1 string, p2 string) (*types.AccessPointRsp, error) {
	if s.Internal.GetAccessPointsV2 == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetAccessPointsV2(p0, p1, p2)
}

func (s *LocatorStub) GetAccessPointsV2(p0 context.Context, p1 string, p2 string) (*types.AccessPointRsp, error) {
	return nil, ErrNotSupported
}

func (s *LocatorStruct) GetAssetSourceDownloadInfos(p0 context.Context, p1 string) ([]*types.AssetSourceDownloadInfoRsp, error) {
	if s.Internal.GetAssetSourceDownloadInfos == nil {
		return *new([]*types.AssetSourceDownloadInfoRsp), ErrNotSupported
	}
	return s.Internal.GetAssetSourceDownloadInfos(p0, p1)
}

func (s *LocatorStub) GetAssetSourceDownloadInfos(p0 context.Context, p1 string) ([]*types.AssetSourceDownloadInfoRsp, error) {
	return *new([]*types.AssetSourceDownloadInfoRsp), ErrNotSupported
}

func (s *LocatorStruct) GetCandidateIP(p0 context.Context, p1 string) (string, error) {
	if s.Internal.GetCandidateIP == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetCandidateIP(p0, p1)
}

func (s *LocatorStub) GetCandidateIP(p0 context.Context, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *LocatorStruct) GetDeploymentCandidateIP(p0 context.Context, p1 string) (string, error) {
	if s.Internal.GetDeploymentCandidateIP == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetDeploymentCandidateIP(p0, p1)
}

func (s *LocatorStub) GetDeploymentCandidateIP(p0 context.Context, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *LocatorStruct) GetSchedulerWithNode(p0 context.Context, p1 string) (string, error) {
	if s.Internal.GetSchedulerWithNode == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetSchedulerWithNode(p0, p1)
}

func (s *LocatorStub) GetSchedulerWithNode(p0 context.Context, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *LocatorStruct) GetUserAccessPoint(p0 context.Context, p1 string) (*AccessPoint, error) {
	if s.Internal.GetUserAccessPoint == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetUserAccessPoint(p0, p1)
}

func (s *LocatorStub) GetUserAccessPoint(p0 context.Context, p1 string) (*AccessPoint, error) {
	return nil, ErrNotSupported
}




func (s *NodeAPIStruct) CalculateDowntimePenalty(p0 context.Context, p1 string) (types.ExitProfitRsp, error) {
	if s.Internal.CalculateDowntimePenalty == nil {
		return *new(types.ExitProfitRsp), ErrNotSupported
	}
	return s.Internal.CalculateDowntimePenalty(p0, p1)
}

func (s *NodeAPIStub) CalculateDowntimePenalty(p0 context.Context, p1 string) (types.ExitProfitRsp, error) {
	return *new(types.ExitProfitRsp), ErrNotSupported
}

func (s *NodeAPIStruct) CalculateExitProfit(p0 context.Context, p1 string) (types.ExitProfitRsp, error) {
	if s.Internal.CalculateExitProfit == nil {
		return *new(types.ExitProfitRsp), ErrNotSupported
	}
	return s.Internal.CalculateExitProfit(p0, p1)
}

func (s *NodeAPIStub) CalculateExitProfit(p0 context.Context, p1 string) (types.ExitProfitRsp, error) {
	return *new(types.ExitProfitRsp), ErrNotSupported
}

func (s *NodeAPIStruct) CandidateConnect(p0 context.Context, p1 *types.ConnectOptions) (error) {
	if s.Internal.CandidateConnect == nil {
		return ErrNotSupported
	}
	return s.Internal.CandidateConnect(p0, p1)
}

func (s *NodeAPIStub) CandidateConnect(p0 context.Context, p1 *types.ConnectOptions) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) CheckIpUsage(p0 context.Context, p1 string) (bool, error) {
	if s.Internal.CheckIpUsage == nil {
		return false, ErrNotSupported
	}
	return s.Internal.CheckIpUsage(p0, p1)
}

func (s *NodeAPIStub) CheckIpUsage(p0 context.Context, p1 string) (bool, error) {
	return false, ErrNotSupported
}

func (s *NodeAPIStruct) CleanupNode(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.CleanupNode == nil {
		return ErrNotSupported
	}
	return s.Internal.CleanupNode(p0, p1, p2)
}

func (s *NodeAPIStub) CleanupNode(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) CreateTunnel(p0 context.Context, p1 *types.CreateTunnelReq) (error) {
	if s.Internal.CreateTunnel == nil {
		return ErrNotSupported
	}
	return s.Internal.CreateTunnel(p0, p1)
}

func (s *NodeAPIStub) CreateTunnel(p0 context.Context, p1 *types.CreateTunnelReq) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) DeactivateNode(p0 context.Context, p1 string, p2 int) (error) {
	if s.Internal.DeactivateNode == nil {
		return ErrNotSupported
	}
	return s.Internal.DeactivateNode(p0, p1, p2)
}

func (s *NodeAPIStub) DeactivateNode(p0 context.Context, p1 string, p2 int) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) DownloadDataResult(p0 context.Context, p1 string, p2 string, p3 int64) (error) {
	if s.Internal.DownloadDataResult == nil {
		return ErrNotSupported
	}
	return s.Internal.DownloadDataResult(p0, p1, p2, p3)
}

func (s *NodeAPIStub) DownloadDataResult(p0 context.Context, p1 string, p2 string, p3 int64) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) EdgeConnect(p0 context.Context, p1 *types.ConnectOptions) (error) {
	if s.Internal.EdgeConnect == nil {
		return ErrNotSupported
	}
	return s.Internal.EdgeConnect(p0, p1)
}

func (s *NodeAPIStub) EdgeConnect(p0 context.Context, p1 *types.ConnectOptions) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) ForceNodeOffline(p0 context.Context, p1 string, p2 bool) (error) {
	if s.Internal.ForceNodeOffline == nil {
		return ErrNotSupported
	}
	return s.Internal.ForceNodeOffline(p0, p1, p2)
}

func (s *NodeAPIStub) ForceNodeOffline(p0 context.Context, p1 string, p2 bool) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) FreeUpDiskSpace(p0 context.Context, p1 string, p2 int64) (*types.FreeUpDiskResp, error) {
	if s.Internal.FreeUpDiskSpace == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.FreeUpDiskSpace(p0, p1, p2)
}

func (s *NodeAPIStub) FreeUpDiskSpace(p0 context.Context, p1 string, p2 int64) (*types.FreeUpDiskResp, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) GetAssetSourceDownloadInfo(p0 context.Context, p1 string) (*types.AssetSourceDownloadInfoRsp, error) {
	if s.Internal.GetAssetSourceDownloadInfo == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetAssetSourceDownloadInfo(p0, p1)
}

func (s *NodeAPIStub) GetAssetSourceDownloadInfo(p0 context.Context, p1 string) (*types.AssetSourceDownloadInfoRsp, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) GetAssetView(p0 context.Context, p1 string, p2 bool) (*types.AssetView, error) {
	if s.Internal.GetAssetView == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetAssetView(p0, p1, p2)
}

func (s *NodeAPIStub) GetAssetView(p0 context.Context, p1 string, p2 bool) (*types.AssetView, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) GetAssetsInBucket(p0 context.Context, p1 string, p2 int, p3 bool) ([]string, error) {
	if s.Internal.GetAssetsInBucket == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GetAssetsInBucket(p0, p1, p2, p3)
}

func (s *NodeAPIStub) GetAssetsInBucket(p0 context.Context, p1 string, p2 int, p3 bool) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *NodeAPIStruct) GetCandidateDownloadInfos(p0 context.Context, p1 string) ([]*types.CandidateDownloadInfo, error) {
	if s.Internal.GetCandidateDownloadInfos == nil {
		return *new([]*types.CandidateDownloadInfo), ErrNotSupported
	}
	return s.Internal.GetCandidateDownloadInfos(p0, p1)
}

func (s *NodeAPIStub) GetCandidateDownloadInfos(p0 context.Context, p1 string) ([]*types.CandidateDownloadInfo, error) {
	return *new([]*types.CandidateDownloadInfo), ErrNotSupported
}

func (s *NodeAPIStruct) GetCandidateIPs(p0 context.Context) ([]*types.NodeIPInfo, error) {
	if s.Internal.GetCandidateIPs == nil {
		return *new([]*types.NodeIPInfo), ErrNotSupported
	}
	return s.Internal.GetCandidateIPs(p0)
}

func (s *NodeAPIStub) GetCandidateIPs(p0 context.Context) ([]*types.NodeIPInfo, error) {
	return *new([]*types.NodeIPInfo), ErrNotSupported
}

func (s *NodeAPIStruct) GetCandidateNodeIP(p0 context.Context, p1 string) (string, error) {
	if s.Internal.GetCandidateNodeIP == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetCandidateNodeIP(p0, p1)
}

func (s *NodeAPIStub) GetCandidateNodeIP(p0 context.Context, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *NodeAPIStruct) GetCandidateURLsForDetectNat(p0 context.Context) ([]string, error) {
	if s.Internal.GetCandidateURLsForDetectNat == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GetCandidateURLsForDetectNat(p0)
}

func (s *NodeAPIStub) GetCandidateURLsForDetectNat(p0 context.Context) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *NodeAPIStruct) GetCurrentRegionInfos(p0 context.Context, p1 string) (map[string]int, error) {
	if s.Internal.GetCurrentRegionInfos == nil {
		return *new(map[string]int), ErrNotSupported
	}
	return s.Internal.GetCurrentRegionInfos(p0, p1)
}

func (s *NodeAPIStub) GetCurrentRegionInfos(p0 context.Context, p1 string) (map[string]int, error) {
	return *new(map[string]int), ErrNotSupported
}

func (s *NodeAPIStruct) GetEdgeDownloadInfos(p0 context.Context, p1 string) (*types.EdgeDownloadInfoList, error) {
	if s.Internal.GetEdgeDownloadInfos == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetEdgeDownloadInfos(p0, p1)
}

func (s *NodeAPIStub) GetEdgeDownloadInfos(p0 context.Context, p1 string) (*types.EdgeDownloadInfoList, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) GetEdgeExternalServiceAddress(p0 context.Context, p1 string, p2 string) (string, error) {
	if s.Internal.GetEdgeExternalServiceAddress == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetEdgeExternalServiceAddress(p0, p1, p2)
}

func (s *NodeAPIStub) GetEdgeExternalServiceAddress(p0 context.Context, p1 string, p2 string) (string, error) {
	return "", ErrNotSupported
}

func (s *NodeAPIStruct) GetExternalAddress(p0 context.Context) (string, error) {
	if s.Internal.GetExternalAddress == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetExternalAddress(p0)
}

func (s *NodeAPIStub) GetExternalAddress(p0 context.Context) (string, error) {
	return "", ErrNotSupported
}

func (s *NodeAPIStruct) GetMinioConfigFromCandidate(p0 context.Context, p1 string) (*types.MinioConfig, error) {
	if s.Internal.GetMinioConfigFromCandidate == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetMinioConfigFromCandidate(p0, p1)
}

func (s *NodeAPIStub) GetMinioConfigFromCandidate(p0 context.Context, p1 string) (*types.MinioConfig, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) GetNextFreeTime(p0 context.Context, p1 string) (int64, error) {
	if s.Internal.GetNextFreeTime == nil {
		return 0, ErrNotSupported
	}
	return s.Internal.GetNextFreeTime(p0, p1)
}

func (s *NodeAPIStub) GetNextFreeTime(p0 context.Context, p1 string) (int64, error) {
	return 0, ErrNotSupported
}

func (s *NodeAPIStruct) GetNodeInfo(p0 context.Context, p1 string) (*types.NodeInfo, error) {
	if s.Internal.GetNodeInfo == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetNodeInfo(p0, p1)
}

func (s *NodeAPIStub) GetNodeInfo(p0 context.Context, p1 string) (*types.NodeInfo, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) GetNodeList(p0 context.Context, p1 int, p2 int) (*types.ListNodesRsp, error) {
	if s.Internal.GetNodeList == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetNodeList(p0, p1, p2)
}

func (s *NodeAPIStub) GetNodeList(p0 context.Context, p1 int, p2 int) (*types.ListNodesRsp, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) GetNodeOfIP(p0 context.Context, p1 string) ([]string, error) {
	if s.Internal.GetNodeOfIP == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GetNodeOfIP(p0, p1)
}

func (s *NodeAPIStub) GetNodeOfIP(p0 context.Context, p1 string) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *NodeAPIStruct) GetNodeOnlineState(p0 context.Context) (bool, error) {
	if s.Internal.GetNodeOnlineState == nil {
		return false, ErrNotSupported
	}
	return s.Internal.GetNodeOnlineState(p0)
}

func (s *NodeAPIStub) GetNodeOnlineState(p0 context.Context) (bool, error) {
	return false, ErrNotSupported
}

func (s *NodeAPIStruct) GetNodeToken(p0 context.Context, p1 string) (string, error) {
	if s.Internal.GetNodeToken == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetNodeToken(p0, p1)
}

func (s *NodeAPIStub) GetNodeToken(p0 context.Context, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *NodeAPIStruct) GetNodesFromRegion(p0 context.Context, p1 string) ([]*types.NodeInfo, error) {
	if s.Internal.GetNodesFromRegion == nil {
		return *new([]*types.NodeInfo), ErrNotSupported
	}
	return s.Internal.GetNodesFromRegion(p0, p1)
}

func (s *NodeAPIStub) GetNodesFromRegion(p0 context.Context, p1 string) ([]*types.NodeInfo, error) {
	return *new([]*types.NodeInfo), ErrNotSupported
}

func (s *NodeAPIStruct) GetOnlineNodeCount(p0 context.Context, p1 types.NodeType) (int, error) {
	if s.Internal.GetOnlineNodeCount == nil {
		return 0, ErrNotSupported
	}
	return s.Internal.GetOnlineNodeCount(p0, p1)
}

func (s *NodeAPIStub) GetOnlineNodeCount(p0 context.Context, p1 types.NodeType) (int, error) {
	return 0, ErrNotSupported
}

func (s *NodeAPIStruct) GetProfitDetailsForNode(p0 context.Context, p1 string, p2 int, p3 int, p4 []int) (*types.ListNodeProfitDetailsRsp, error) {
	if s.Internal.GetProfitDetailsForNode == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetProfitDetailsForNode(p0, p1, p2, p3, p4)
}

func (s *NodeAPIStub) GetProfitDetailsForNode(p0 context.Context, p1 string, p2 int, p3 int, p4 []int) (*types.ListNodeProfitDetailsRsp, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) GetTunserverURLFromUser(p0 context.Context, p1 *types.TunserverReq) (*types.TunserverRsp, error) {
	if s.Internal.GetTunserverURLFromUser == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetTunserverURLFromUser(p0, p1)
}

func (s *NodeAPIStub) GetTunserverURLFromUser(p0 context.Context, p1 *types.TunserverReq) (*types.TunserverRsp, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) L3Connect(p0 context.Context, p1 *types.ConnectOptions) (error) {
	if s.Internal.L3Connect == nil {
		return ErrNotSupported
	}
	return s.Internal.L3Connect(p0, p1)
}

func (s *NodeAPIStub) L3Connect(p0 context.Context, p1 *types.ConnectOptions) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) L5Connect(p0 context.Context, p1 *types.ConnectOptions) (error) {
	if s.Internal.L5Connect == nil {
		return ErrNotSupported
	}
	return s.Internal.L5Connect(p0, p1)
}

func (s *NodeAPIStub) L5Connect(p0 context.Context, p1 *types.ConnectOptions) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) LoadNodeBandwidthScores(p0 context.Context, p1 string, p2 time.Time, p3 time.Time, p4 int, p5 int) (*types.ListBandwidthScoreRsp, error) {
	if s.Internal.LoadNodeBandwidthScores == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.LoadNodeBandwidthScores(p0, p1, p2, p3, p4, p5)
}

func (s *NodeAPIStub) LoadNodeBandwidthScores(p0 context.Context, p1 string, p2 time.Time, p3 time.Time, p4 int, p5 int) (*types.ListBandwidthScoreRsp, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) MigrateNodeIn(p0 context.Context, p1 *types.NodeMigrateInfo) (error) {
	if s.Internal.MigrateNodeIn == nil {
		return ErrNotSupported
	}
	return s.Internal.MigrateNodeIn(p0, p1)
}

func (s *NodeAPIStub) MigrateNodeIn(p0 context.Context, p1 *types.NodeMigrateInfo) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) MigrateNodeOut(p0 context.Context, p1 string) (*types.NodeMigrateInfo, error) {
	if s.Internal.MigrateNodeOut == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.MigrateNodeOut(p0, p1)
}

func (s *NodeAPIStub) MigrateNodeOut(p0 context.Context, p1 string) (*types.NodeMigrateInfo, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) NatPunch(p0 context.Context, p1 *types.NatPunchReq) (error) {
	if s.Internal.NatPunch == nil {
		return ErrNotSupported
	}
	return s.Internal.NatPunch(p0, p1)
}

func (s *NodeAPIStub) NatPunch(p0 context.Context, p1 *types.NatPunchReq) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) NodeExists(p0 context.Context, p1 string) (error) {
	if s.Internal.NodeExists == nil {
		return ErrNotSupported
	}
	return s.Internal.NodeExists(p0, p1)
}

func (s *NodeAPIStub) NodeExists(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) NodeKeepalive(p0 context.Context) (*types.KeepaliveRsp, error) {
	if s.Internal.NodeKeepalive == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.NodeKeepalive(p0)
}

func (s *NodeAPIStub) NodeKeepalive(p0 context.Context) (*types.KeepaliveRsp, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) NodeKeepaliveV2(p0 context.Context) (uuid.UUID, error) {
	if s.Internal.NodeKeepaliveV2 == nil {
		return *new(uuid.UUID), ErrNotSupported
	}
	return s.Internal.NodeKeepaliveV2(p0)
}

func (s *NodeAPIStub) NodeKeepaliveV2(p0 context.Context) (uuid.UUID, error) {
	return *new(uuid.UUID), ErrNotSupported
}

func (s *NodeAPIStruct) NodeKeepaliveV3(p0 context.Context, p1 *types.KeepaliveReq) (*types.KeepaliveRsp, error) {
	if s.Internal.NodeKeepaliveV3 == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.NodeKeepaliveV3(p0, p1)
}

func (s *NodeAPIStub) NodeKeepaliveV3(p0 context.Context, p1 *types.KeepaliveReq) (*types.KeepaliveRsp, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) NodeLogin(p0 context.Context, p1 string, p2 string) (string, error) {
	if s.Internal.NodeLogin == nil {
		return "", ErrNotSupported
	}
	return s.Internal.NodeLogin(p0, p1, p2)
}

func (s *NodeAPIStub) NodeLogin(p0 context.Context, p1 string, p2 string) (string, error) {
	return "", ErrNotSupported
}

func (s *NodeAPIStruct) PerformSyncData(p0 context.Context, p1 string) (error) {
	if s.Internal.PerformSyncData == nil {
		return ErrNotSupported
	}
	return s.Internal.PerformSyncData(p0, p1)
}

func (s *NodeAPIStub) PerformSyncData(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) ReDetermineNodeNATType(p0 context.Context, p1 string) (error) {
	if s.Internal.ReDetermineNodeNATType == nil {
		return ErrNotSupported
	}
	return s.Internal.ReDetermineNodeNATType(p0, p1)
}

func (s *NodeAPIStub) ReDetermineNodeNATType(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) RecompenseNodeProfit(p0 context.Context, p1 string, p2 string, p3 float64) (error) {
	if s.Internal.RecompenseNodeProfit == nil {
		return ErrNotSupported
	}
	return s.Internal.RecompenseNodeProfit(p0, p1, p2, p3)
}

func (s *NodeAPIStub) RecompenseNodeProfit(p0 context.Context, p1 string, p2 string, p3 float64) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) RegisterCandidateNode(p0 context.Context, p1 string, p2 string, p3 string) (*types.ActivationDetail, error) {
	if s.Internal.RegisterCandidateNode == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.RegisterCandidateNode(p0, p1, p2, p3)
}

func (s *NodeAPIStub) RegisterCandidateNode(p0 context.Context, p1 string, p2 string, p3 string) (*types.ActivationDetail, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) RegisterEdgeNode(p0 context.Context, p1 string, p2 string) (*types.ActivationDetail, error) {
	if s.Internal.RegisterEdgeNode == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.RegisterEdgeNode(p0, p1, p2)
}

func (s *NodeAPIStub) RegisterEdgeNode(p0 context.Context, p1 string, p2 string) (*types.ActivationDetail, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) RegisterNode(p0 context.Context, p1 string, p2 string, p3 types.NodeType) (*types.ActivationDetail, error) {
	if s.Internal.RegisterNode == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.RegisterNode(p0, p1, p2, p3)
}

func (s *NodeAPIStub) RegisterNode(p0 context.Context, p1 string, p2 string, p3 types.NodeType) (*types.ActivationDetail, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) RegisterNodeV2(p0 context.Context, p1 types.NodeRegister) (*types.ActivationDetail, error) {
	if s.Internal.RegisterNodeV2 == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.RegisterNodeV2(p0, p1)
}

func (s *NodeAPIStub) RegisterNodeV2(p0 context.Context, p1 types.NodeRegister) (*types.ActivationDetail, error) {
	return nil, ErrNotSupported
}

func (s *NodeAPIStruct) RequestActivationCodes(p0 context.Context, p1 types.NodeType, p2 int) ([]*types.NodeActivation, error) {
	if s.Internal.RequestActivationCodes == nil {
		return *new([]*types.NodeActivation), ErrNotSupported
	}
	return s.Internal.RequestActivationCodes(p0, p1, p2)
}

func (s *NodeAPIStub) RequestActivationCodes(p0 context.Context, p1 types.NodeType, p2 int) ([]*types.NodeActivation, error) {
	return *new([]*types.NodeActivation), ErrNotSupported
}

func (s *NodeAPIStruct) SetTunserverURL(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.SetTunserverURL == nil {
		return ErrNotSupported
	}
	return s.Internal.SetTunserverURL(p0, p1, p2)
}

func (s *NodeAPIStub) SetTunserverURL(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) UndoNodeDeactivation(p0 context.Context, p1 string) (error) {
	if s.Internal.UndoNodeDeactivation == nil {
		return ErrNotSupported
	}
	return s.Internal.UndoNodeDeactivation(p0, p1)
}

func (s *NodeAPIStub) UndoNodeDeactivation(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) UpdateBandwidths(p0 context.Context, p1 int64, p2 int64) (error) {
	if s.Internal.UpdateBandwidths == nil {
		return ErrNotSupported
	}
	return s.Internal.UpdateBandwidths(p0, p1, p2)
}

func (s *NodeAPIStub) UpdateBandwidths(p0 context.Context, p1 int64, p2 int64) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) UpdateNodePort(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.UpdateNodePort == nil {
		return ErrNotSupported
	}
	return s.Internal.UpdateNodePort(p0, p1, p2)
}

func (s *NodeAPIStub) UpdateNodePort(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) UserAssetDownloadResultV2(p0 context.Context, p1 *types.RetrieveEvent) (error) {
	if s.Internal.UserAssetDownloadResultV2 == nil {
		return ErrNotSupported
	}
	return s.Internal.UserAssetDownloadResultV2(p0, p1)
}

func (s *NodeAPIStub) UserAssetDownloadResultV2(p0 context.Context, p1 *types.RetrieveEvent) (error) {
	return ErrNotSupported
}

func (s *NodeAPIStruct) VerifyTokenWithLimitCount(p0 context.Context, p1 string) (*types.JWTPayload, error) {
	if s.Internal.VerifyTokenWithLimitCount == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.VerifyTokenWithLimitCount(p0, p1)
}

func (s *NodeAPIStub) VerifyTokenWithLimitCount(p0 context.Context, p1 string) (*types.JWTPayload, error) {
	return nil, ErrNotSupported
}




func (s *ProjectAPIStruct) DeleteProject(p0 context.Context, p1 *types.ProjectReq) (error) {
	if s.Internal.DeleteProject == nil {
		return ErrNotSupported
	}
	return s.Internal.DeleteProject(p0, p1)
}

func (s *ProjectAPIStub) DeleteProject(p0 context.Context, p1 *types.ProjectReq) (error) {
	return ErrNotSupported
}

func (s *ProjectAPIStruct) DeployProject(p0 context.Context, p1 *types.DeployProjectReq) (error) {
	if s.Internal.DeployProject == nil {
		return ErrNotSupported
	}
	return s.Internal.DeployProject(p0, p1)
}

func (s *ProjectAPIStub) DeployProject(p0 context.Context, p1 *types.DeployProjectReq) (error) {
	return ErrNotSupported
}

func (s *ProjectAPIStruct) GetProjectInfo(p0 context.Context, p1 string) (*types.ProjectInfo, error) {
	if s.Internal.GetProjectInfo == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetProjectInfo(p0, p1)
}

func (s *ProjectAPIStub) GetProjectInfo(p0 context.Context, p1 string) (*types.ProjectInfo, error) {
	return nil, ErrNotSupported
}

func (s *ProjectAPIStruct) GetProjectInfos(p0 context.Context, p1 string, p2 int, p3 int) ([]*types.ProjectInfo, error) {
	if s.Internal.GetProjectInfos == nil {
		return *new([]*types.ProjectInfo), ErrNotSupported
	}
	return s.Internal.GetProjectInfos(p0, p1, p2, p3)
}

func (s *ProjectAPIStub) GetProjectInfos(p0 context.Context, p1 string, p2 int, p3 int) ([]*types.ProjectInfo, error) {
	return *new([]*types.ProjectInfo), ErrNotSupported
}

func (s *ProjectAPIStruct) GetProjectOverviewByNode(p0 context.Context, p1 *types.NodeProjectReq) (*types.ListProjectOverviewRsp, error) {
	if s.Internal.GetProjectOverviewByNode == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetProjectOverviewByNode(p0, p1)
}

func (s *ProjectAPIStub) GetProjectOverviewByNode(p0 context.Context, p1 *types.NodeProjectReq) (*types.ListProjectOverviewRsp, error) {
	return nil, ErrNotSupported
}

func (s *ProjectAPIStruct) GetProjectReplicasForNode(p0 context.Context, p1 *types.NodeProjectReq) (*types.ListProjectReplicaRsp, error) {
	if s.Internal.GetProjectReplicasForNode == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetProjectReplicasForNode(p0, p1)
}

func (s *ProjectAPIStub) GetProjectReplicasForNode(p0 context.Context, p1 *types.NodeProjectReq) (*types.ListProjectReplicaRsp, error) {
	return nil, ErrNotSupported
}

func (s *ProjectAPIStruct) GetProjectsForNode(p0 context.Context, p1 string) ([]*types.ProjectReplicas, error) {
	if s.Internal.GetProjectsForNode == nil {
		return *new([]*types.ProjectReplicas), ErrNotSupported
	}
	return s.Internal.GetProjectsForNode(p0, p1)
}

func (s *ProjectAPIStub) GetProjectsForNode(p0 context.Context, p1 string) ([]*types.ProjectReplicas, error) {
	return *new([]*types.ProjectReplicas), ErrNotSupported
}

func (s *ProjectAPIStruct) RedeployFailedProjects(p0 context.Context, p1 []string) (error) {
	if s.Internal.RedeployFailedProjects == nil {
		return ErrNotSupported
	}
	return s.Internal.RedeployFailedProjects(p0, p1)
}

func (s *ProjectAPIStub) RedeployFailedProjects(p0 context.Context, p1 []string) (error) {
	return ErrNotSupported
}

func (s *ProjectAPIStruct) UpdateProject(p0 context.Context, p1 *types.ProjectReq) (error) {
	if s.Internal.UpdateProject == nil {
		return ErrNotSupported
	}
	return s.Internal.UpdateProject(p0, p1)
}

func (s *ProjectAPIStub) UpdateProject(p0 context.Context, p1 *types.ProjectReq) (error) {
	return ErrNotSupported
}

func (s *ProjectAPIStruct) UpdateProjectStatus(p0 context.Context, p1 []*types.Project) (error) {
	if s.Internal.UpdateProjectStatus == nil {
		return ErrNotSupported
	}
	return s.Internal.UpdateProjectStatus(p0, p1)
}

func (s *ProjectAPIStub) UpdateProjectStatus(p0 context.Context, p1 []*types.Project) (error) {
	return ErrNotSupported
}




func (s *SchedulerStruct) AddNodeServiceEvent(p0 context.Context, p1 *types.ServiceEvent) (error) {
	if s.Internal.AddNodeServiceEvent == nil {
		return ErrNotSupported
	}
	return s.Internal.AddNodeServiceEvent(p0, p1)
}

func (s *SchedulerStub) AddNodeServiceEvent(p0 context.Context, p1 *types.ServiceEvent) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) AssignTunserverURL(p0 context.Context) (*types.TunserverRsp, error) {
	if s.Internal.AssignTunserverURL == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.AssignTunserverURL(p0)
}

func (s *SchedulerStub) AssignTunserverURL(p0 context.Context) (*types.TunserverRsp, error) {
	return nil, ErrNotSupported
}

func (s *SchedulerStruct) CandidateCodeExist(p0 context.Context, p1 string) (bool, error) {
	if s.Internal.CandidateCodeExist == nil {
		return false, ErrNotSupported
	}
	return s.Internal.CandidateCodeExist(p0, p1)
}

func (s *SchedulerStub) CandidateCodeExist(p0 context.Context, p1 string) (bool, error) {
	return false, ErrNotSupported
}

func (s *SchedulerStruct) DeleteEdgeUpdateConfig(p0 context.Context, p1 int) (error) {
	if s.Internal.DeleteEdgeUpdateConfig == nil {
		return ErrNotSupported
	}
	return s.Internal.DeleteEdgeUpdateConfig(p0, p1)
}

func (s *SchedulerStub) DeleteEdgeUpdateConfig(p0 context.Context, p1 int) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) GenerateCandidateCodes(p0 context.Context, p1 int, p2 types.NodeType, p3 bool) ([]string, error) {
	if s.Internal.GenerateCandidateCodes == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GenerateCandidateCodes(p0, p1, p2, p3)
}

func (s *SchedulerStub) GenerateCandidateCodes(p0 context.Context, p1 int, p2 types.NodeType, p3 bool) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *SchedulerStruct) GetCandidateCodeInfos(p0 context.Context, p1 string, p2 string) ([]*types.CandidateCodeInfo, error) {
	if s.Internal.GetCandidateCodeInfos == nil {
		return *new([]*types.CandidateCodeInfo), ErrNotSupported
	}
	return s.Internal.GetCandidateCodeInfos(p0, p1, p2)
}

func (s *SchedulerStub) GetCandidateCodeInfos(p0 context.Context, p1 string, p2 string) ([]*types.CandidateCodeInfo, error) {
	return *new([]*types.CandidateCodeInfo), ErrNotSupported
}

func (s *SchedulerStruct) GetDeploymentProviderIP(p0 context.Context, p1 types.DeploymentID) (string, error) {
	if s.Internal.GetDeploymentProviderIP == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetDeploymentProviderIP(p0, p1)
}

func (s *SchedulerStub) GetDeploymentProviderIP(p0 context.Context, p1 types.DeploymentID) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) GetEdgeUpdateConfigs(p0 context.Context) (map[int]*EdgeUpdateConfig, error) {
	if s.Internal.GetEdgeUpdateConfigs == nil {
		return *new(map[int]*EdgeUpdateConfig), ErrNotSupported
	}
	return s.Internal.GetEdgeUpdateConfigs(p0)
}

func (s *SchedulerStub) GetEdgeUpdateConfigs(p0 context.Context) (map[int]*EdgeUpdateConfig, error) {
	return *new(map[int]*EdgeUpdateConfig), ErrNotSupported
}

func (s *SchedulerStruct) GetNodePublicKey(p0 context.Context, p1 string) (string, error) {
	if s.Internal.GetNodePublicKey == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetNodePublicKey(p0, p1)
}

func (s *SchedulerStub) GetNodePublicKey(p0 context.Context, p1 string) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) GetNodeUploadInfo(p0 context.Context, p1 string, p2 string, p3 bool) (*types.UploadInfo, error) {
	if s.Internal.GetNodeUploadInfo == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetNodeUploadInfo(p0, p1, p2, p3)
}

func (s *SchedulerStub) GetNodeUploadInfo(p0 context.Context, p1 string, p2 string, p3 bool) (*types.UploadInfo, error) {
	return nil, ErrNotSupported
}

func (s *SchedulerStruct) GetNodeUploadInfoV2(p0 context.Context, p1 *types.GetUploadInfoReq) (*types.UploadInfo, error) {
	if s.Internal.GetNodeUploadInfoV2 == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetNodeUploadInfoV2(p0, p1)
}

func (s *SchedulerStub) GetNodeUploadInfoV2(p0 context.Context, p1 *types.GetUploadInfoReq) (*types.UploadInfo, error) {
	return nil, ErrNotSupported
}

func (s *SchedulerStruct) GetReplicaEvents(p0 context.Context, p1 time.Time, p2 time.Time, p3 int, p4 int) (*types.ListAssetReplicaEventRsp, error) {
	if s.Internal.GetReplicaEvents == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetReplicaEvents(p0, p1, p2, p3, p4)
}

func (s *SchedulerStub) GetReplicaEvents(p0 context.Context, p1 time.Time, p2 time.Time, p3 int, p4 int) (*types.ListAssetReplicaEventRsp, error) {
	return nil, ErrNotSupported
}

func (s *SchedulerStruct) GetSchedulerPublicKey(p0 context.Context) (string, error) {
	if s.Internal.GetSchedulerPublicKey == nil {
		return "", ErrNotSupported
	}
	return s.Internal.GetSchedulerPublicKey(p0)
}

func (s *SchedulerStub) GetSchedulerPublicKey(p0 context.Context) (string, error) {
	return "", ErrNotSupported
}

func (s *SchedulerStruct) GetValidationResults(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListValidationResultRsp, error) {
	if s.Internal.GetValidationResults == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetValidationResults(p0, p1, p2, p3)
}

func (s *SchedulerStub) GetValidationResults(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListValidationResultRsp, error) {
	return nil, ErrNotSupported
}

func (s *SchedulerStruct) GetValidators(p0 context.Context) ([]string, error) {
	if s.Internal.GetValidators == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.GetValidators(p0)
}

func (s *SchedulerStub) GetValidators(p0 context.Context) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *SchedulerStruct) GetWorkloadRecord(p0 context.Context, p1 string) (*types.WorkloadRecord, error) {
	if s.Internal.GetWorkloadRecord == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetWorkloadRecord(p0, p1)
}

func (s *SchedulerStub) GetWorkloadRecord(p0 context.Context, p1 string) (*types.WorkloadRecord, error) {
	return nil, ErrNotSupported
}

func (s *SchedulerStruct) GetWorkloadRecords(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListWorkloadRecordRsp, error) {
	if s.Internal.GetWorkloadRecords == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.GetWorkloadRecords(p0, p1, p2, p3)
}

func (s *SchedulerStub) GetWorkloadRecords(p0 context.Context, p1 string, p2 int, p3 int) (*types.ListWorkloadRecordRsp, error) {
	return nil, ErrNotSupported
}

func (s *SchedulerStruct) NodeValidationResult(p0 context.Context, p1 io.Reader, p2 string) (error) {
	if s.Internal.NodeValidationResult == nil {
		return ErrNotSupported
	}
	return s.Internal.NodeValidationResult(p0, p1, p2)
}

func (s *SchedulerStub) NodeValidationResult(p0 context.Context, p1 io.Reader, p2 string) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) RemoveCandidateCode(p0 context.Context, p1 string) (error) {
	if s.Internal.RemoveCandidateCode == nil {
		return ErrNotSupported
	}
	return s.Internal.RemoveCandidateCode(p0, p1)
}

func (s *SchedulerStub) RemoveCandidateCode(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) ResetCandidateCode(p0 context.Context, p1 string, p2 string) (error) {
	if s.Internal.ResetCandidateCode == nil {
		return ErrNotSupported
	}
	return s.Internal.ResetCandidateCode(p0, p1, p2)
}

func (s *SchedulerStub) ResetCandidateCode(p0 context.Context, p1 string, p2 string) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) SetEdgeUpdateConfig(p0 context.Context, p1 *EdgeUpdateConfig) (error) {
	if s.Internal.SetEdgeUpdateConfig == nil {
		return ErrNotSupported
	}
	return s.Internal.SetEdgeUpdateConfig(p0, p1)
}

func (s *SchedulerStub) SetEdgeUpdateConfig(p0 context.Context, p1 *EdgeUpdateConfig) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) SubmitProjectReport(p0 context.Context, p1 *types.ProjectRecordReq) (error) {
	if s.Internal.SubmitProjectReport == nil {
		return ErrNotSupported
	}
	return s.Internal.SubmitProjectReport(p0, p1)
}

func (s *SchedulerStub) SubmitProjectReport(p0 context.Context, p1 *types.ProjectRecordReq) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) SubmitWorkloadReport(p0 context.Context, p1 *types.WorkloadRecordReq) (error) {
	if s.Internal.SubmitWorkloadReport == nil {
		return ErrNotSupported
	}
	return s.Internal.SubmitWorkloadReport(p0, p1)
}

func (s *SchedulerStub) SubmitWorkloadReport(p0 context.Context, p1 *types.WorkloadRecordReq) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) SubmitWorkloadReportV2(p0 context.Context, p1 *types.WorkloadRecordReq) (error) {
	if s.Internal.SubmitWorkloadReportV2 == nil {
		return ErrNotSupported
	}
	return s.Internal.SubmitWorkloadReportV2(p0, p1)
}

func (s *SchedulerStub) SubmitWorkloadReportV2(p0 context.Context, p1 *types.WorkloadRecordReq) (error) {
	return ErrNotSupported
}

func (s *SchedulerStruct) UserAssetDownloadResult(p0 context.Context, p1 string, p2 string, p3 int64, p4 int64) (error) {
	if s.Internal.UserAssetDownloadResult == nil {
		return ErrNotSupported
	}
	return s.Internal.UserAssetDownloadResult(p0, p1, p2, p3, p4)
}

func (s *SchedulerStub) UserAssetDownloadResult(p0 context.Context, p1 string, p2 string, p3 int64, p4 int64) (error) {
	return ErrNotSupported
}




func (s *ValidationStruct) ExecuteValidation(p0 context.Context, p1 *ValidateReq) (error) {
	if s.Internal.ExecuteValidation == nil {
		return ErrNotSupported
	}
	return s.Internal.ExecuteValidation(p0, p1)
}

func (s *ValidationStub) ExecuteValidation(p0 context.Context, p1 *ValidateReq) (error) {
	return ErrNotSupported
}




func (s *WorkerdStruct) Delete(p0 context.Context, p1 string) (error) {
	if s.Internal.Delete == nil {
		return ErrNotSupported
	}
	return s.Internal.Delete(p0, p1)
}

func (s *WorkerdStub) Delete(p0 context.Context, p1 string) (error) {
	return ErrNotSupported
}

func (s *WorkerdStruct) Deploy(p0 context.Context, p1 *types.Project) (error) {
	if s.Internal.Deploy == nil {
		return ErrNotSupported
	}
	return s.Internal.Deploy(p0, p1)
}

func (s *WorkerdStub) Deploy(p0 context.Context, p1 *types.Project) (error) {
	return ErrNotSupported
}

func (s *WorkerdStruct) Query(p0 context.Context, p1 []string) ([]*types.Project, error) {
	if s.Internal.Query == nil {
		return *new([]*types.Project), ErrNotSupported
	}
	return s.Internal.Query(p0, p1)
}

func (s *WorkerdStub) Query(p0 context.Context, p1 []string) ([]*types.Project, error) {
	return *new([]*types.Project), ErrNotSupported
}

func (s *WorkerdStruct) Update(p0 context.Context, p1 *types.Project) (error) {
	if s.Internal.Update == nil {
		return ErrNotSupported
	}
	return s.Internal.Update(p0, p1)
}

func (s *WorkerdStub) Update(p0 context.Context, p1 *types.Project) (error) {
	return ErrNotSupported
}



var _ Asset = new(AssetStruct)
var _ AssetAPI = new(AssetAPIStruct)
var _ Candidate = new(CandidateStruct)
var _ Common = new(CommonStruct)
var _ DataSync = new(DataSyncStruct)
var _ Device = new(DeviceStruct)
var _ Edge = new(EdgeStruct)
var _ L5 = new(L5Struct)
var _ Locator = new(LocatorStruct)
var _ NodeAPI = new(NodeAPIStruct)
var _ ProjectAPI = new(ProjectAPIStruct)
var _ Scheduler = new(SchedulerStruct)
var _ Validation = new(ValidationStruct)
var _ Workerd = new(WorkerdStruct)


