// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package projects

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *ProjectInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{174}); err != nil {
		return err
	}

	// t.Name (string) (string)
	if len("Name") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Name\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Name"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Name")); err != nil {
		return err
	}

	if len(t.Name) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Name was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Name))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Name)); err != nil {
		return err
	}

	// t.Type (int64) (int64)
	if len("Type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Type")); err != nil {
		return err
	}

	if t.Type >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Type)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Type-1)); err != nil {
			return err
		}
	}

	// t.UUID (projects.ProjectID) (string)
	if len("UUID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"UUID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("UUID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("UUID")); err != nil {
		return err
	}

	if len(t.UUID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.UUID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.UUID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.UUID)); err != nil {
		return err
	}

	// t.Event (int64) (int64)
	if len("Event") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Event\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Event"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Event")); err != nil {
		return err
	}

	if t.Event >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Event)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Event-1)); err != nil {
			return err
		}
	}

	// t.State (projects.ProjectState) (string)
	if len("State") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"State\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("State"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("State")); err != nil {
		return err
	}

	if len(t.State) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.State was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.State))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.State)); err != nil {
		return err
	}

	// t.UserID (string) (string)
	if len("UserID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"UserID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("UserID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("UserID")); err != nil {
		return err
	}

	if len(t.UserID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.UserID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.UserID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.UserID)); err != nil {
		return err
	}

	// t.Replicas (int64) (int64)
	if len("Replicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Replicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Replicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Replicas")); err != nil {
		return err
	}

	if t.Replicas >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Replicas)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Replicas-1)); err != nil {
			return err
		}
	}

	// t.BundleURL (string) (string)
	if len("BundleURL") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"BundleURL\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("BundleURL"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("BundleURL")); err != nil {
		return err
	}

	if len(t.BundleURL) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.BundleURL was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.BundleURL))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.BundleURL)); err != nil {
		return err
	}

	// t.RetryCount (int64) (int64)
	if len("RetryCount") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"RetryCount\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("RetryCount"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("RetryCount")); err != nil {
		return err
	}

	if t.RetryCount >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.RetryCount)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.RetryCount-1)); err != nil {
			return err
		}
	}

	// t.DetailsList ([]string) (slice)
	if len("DetailsList") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"DetailsList\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("DetailsList"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("DetailsList")); err != nil {
		return err
	}

	if len(t.DetailsList) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.DetailsList was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.DetailsList))); err != nil {
		return err
	}
	for _, v := range t.DetailsList {
		if len(v) > cbg.MaxLength {
			return xerrors.Errorf("Value in field v was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(v)); err != nil {
			return err
		}
	}

	// t.Requirement (projects.ProjectRequirement) (struct)
	if len("Requirement") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Requirement\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Requirement"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Requirement")); err != nil {
		return err
	}

	if err := t.Requirement.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.EdgeWaitings (int64) (int64)
	if len("EdgeWaitings") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"EdgeWaitings\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("EdgeWaitings"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("EdgeWaitings")); err != nil {
		return err
	}

	if t.EdgeWaitings >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.EdgeWaitings)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.EdgeWaitings-1)); err != nil {
			return err
		}
	}

	// t.ReplenishReplicas (int64) (int64)
	if len("ReplenishReplicas") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ReplenishReplicas\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ReplenishReplicas"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ReplenishReplicas")); err != nil {
		return err
	}

	if t.ReplenishReplicas >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.ReplenishReplicas)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.ReplenishReplicas-1)); err != nil {
			return err
		}
	}

	// t.EdgeReplicaSucceeds ([]string) (slice)
	if len("EdgeReplicaSucceeds") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"EdgeReplicaSucceeds\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("EdgeReplicaSucceeds"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("EdgeReplicaSucceeds")); err != nil {
		return err
	}

	if len(t.EdgeReplicaSucceeds) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.EdgeReplicaSucceeds was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.EdgeReplicaSucceeds))); err != nil {
		return err
	}
	for _, v := range t.EdgeReplicaSucceeds {
		if len(v) > cbg.MaxLength {
			return xerrors.Errorf("Value in field v was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(v)); err != nil {
			return err
		}
	}
	return nil
}

func (t *ProjectInfo) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ProjectInfo{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ProjectInfo: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Name (string) (string)
		case "Name":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Name = string(sval)
			}
			// t.Type (int64) (int64)
		case "Type":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Type = int64(extraI)
			}
			// t.UUID (projects.ProjectID) (string)
		case "UUID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.UUID = ProjectID(sval)
			}
			// t.Event (int64) (int64)
		case "Event":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Event = int64(extraI)
			}
			// t.State (projects.ProjectState) (string)
		case "State":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.State = ProjectState(sval)
			}
			// t.UserID (string) (string)
		case "UserID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.UserID = string(sval)
			}
			// t.Replicas (int64) (int64)
		case "Replicas":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Replicas = int64(extraI)
			}
			// t.BundleURL (string) (string)
		case "BundleURL":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.BundleURL = string(sval)
			}
			// t.RetryCount (int64) (int64)
		case "RetryCount":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.RetryCount = int64(extraI)
			}
			// t.DetailsList ([]string) (slice)
		case "DetailsList":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.DetailsList: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.DetailsList = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {

				{
					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					t.DetailsList[i] = string(sval)
				}
			}

			// t.Requirement (projects.ProjectRequirement) (struct)
		case "Requirement":

			{

				if err := t.Requirement.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Requirement: %w", err)
				}

			}
			// t.EdgeWaitings (int64) (int64)
		case "EdgeWaitings":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.EdgeWaitings = int64(extraI)
			}
			// t.ReplenishReplicas (int64) (int64)
		case "ReplenishReplicas":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.ReplenishReplicas = int64(extraI)
			}
			// t.EdgeReplicaSucceeds ([]string) (slice)
		case "EdgeReplicaSucceeds":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.EdgeReplicaSucceeds: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.EdgeReplicaSucceeds = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {

				{
					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					t.EdgeReplicaSucceeds[i] = string(sval)
				}
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ProjectRequirement) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{165}); err != nil {
		return err
	}

	// t.AreaID (string) (string)
	if len("AreaID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"AreaID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("AreaID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("AreaID")); err != nil {
		return err
	}

	if len(t.AreaID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.AreaID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.AreaID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.AreaID)); err != nil {
		return err
	}

	// t.Memory (int64) (int64)
	if len("Memory") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Memory\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Memory"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Memory")); err != nil {
		return err
	}

	if t.Memory >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Memory)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Memory-1)); err != nil {
			return err
		}
	}

	// t.NodeIDs ([]string) (slice)
	if len("NodeIDs") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"NodeIDs\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("NodeIDs"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("NodeIDs")); err != nil {
		return err
	}

	if len(t.NodeIDs) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.NodeIDs was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.NodeIDs))); err != nil {
		return err
	}
	for _, v := range t.NodeIDs {
		if len(v) > cbg.MaxLength {
			return xerrors.Errorf("Value in field v was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(v)); err != nil {
			return err
		}
	}

	// t.Version (int64) (int64)
	if len("Version") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Version\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Version"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Version")); err != nil {
		return err
	}

	if t.Version >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Version)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Version-1)); err != nil {
			return err
		}
	}

	// t.CPUCores (int64) (int64)
	if len("CPUCores") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CPUCores\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CPUCores"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CPUCores")); err != nil {
		return err
	}

	if t.CPUCores >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CPUCores)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CPUCores-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *ProjectRequirement) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ProjectRequirement{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ProjectRequirement: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.AreaID (string) (string)
		case "AreaID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.AreaID = string(sval)
			}
			// t.Memory (int64) (int64)
		case "Memory":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Memory = int64(extraI)
			}
			// t.NodeIDs ([]string) (slice)
		case "NodeIDs":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.NodeIDs: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.NodeIDs = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {

				{
					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					t.NodeIDs[i] = string(sval)
				}
			}

			// t.Version (int64) (int64)
		case "Version":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Version = int64(extraI)
			}
			// t.CPUCores (int64) (int64)
		case "CPUCores":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CPUCores = int64(extraI)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
